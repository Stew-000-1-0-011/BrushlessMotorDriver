
BrushlessMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c48  08006c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08006c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08006c5c  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139fb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e98  00000000  00000000  00033a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000358d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00036598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024494  00000000  00000000  000371e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bae3  00000000  00000000  0005b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8010  00000000  00000000  00067157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003784  00000000  00000000  0015f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006bdc 	.word	0x08006bdc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08006bdc 	.word	0x08006bdc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 f9aa 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80a 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8b0 	bl	8000678 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000518:	f000 f878 	bl	800060c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  main_cpp(&hcan1);
 800051c:	4801      	ldr	r0, [pc, #4]	; (8000524 <main+0x1c>)
 800051e:	f001 ff37 	bl	8002390 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x1a>
 8000524:	20000028 	.word	0x20000028

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2234      	movs	r2, #52	; 0x34
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f006 fb48 	bl	8006bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <SystemClock_Config+0xdc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <SystemClock_Config+0xdc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xdc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <SystemClock_Config+0xe0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <SystemClock_Config+0xe0>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800059c:	23b4      	movs	r3, #180	; 0xb4
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 faad 	bl	8001b10 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005bc:	f000 f876 	bl	80006ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005c0:	f000 ffc6 	bl	8001550 <HAL_PWREx_EnableOverDrive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ca:	f000 f86f 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	2105      	movs	r1, #5
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 ffff 	bl	80015f0 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005f8:	f000 f858 	bl	80006ac <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_CAN1_Init+0x64>)
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_CAN1_Init+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_CAN1_Init+0x64>)
 8000618:	2203      	movs	r2, #3
 800061a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_CAN1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_CAN1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_CAN1_Init+0x64>)
 800062a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800062e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_CAN1_Init+0x64>)
 8000632:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000636:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_CAN1_Init+0x64>)
 8000640:	2201      	movs	r2, #1
 8000642:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_CAN1_Init+0x64>)
 800064c:	2201      	movs	r2, #1
 800064e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_CAN1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_CAN1_Init+0x64>)
 800065e:	f000 f973 	bl	8000948 <HAL_CAN_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 f820 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	40006400 	.word	0x40006400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_GPIO_Init+0x30>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <MX_GPIO_Init+0x30>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_GPIO_Init+0x30>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <HAL_MspInit+0x4c>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_MspInit+0x4c>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_MspInit+0x4c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_MspInit+0x4c>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_CAN_MspInit+0x84>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d12c      	bne.n	8000784 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_CAN_MspInit+0x88>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <HAL_CAN_MspInit+0x88>)
 8000734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_CAN_MspInit+0x88>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_CAN_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_CAN_MspInit+0x88>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_CAN_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000774:	2309      	movs	r3, #9
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <HAL_CAN_MspInit+0x8c>)
 8000780:	f000 fd52 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40006400 	.word	0x40006400
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f890 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <SystemInit+0x20>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <SystemInit+0x20>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000818:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800082c:	4c0b      	ldr	r4, [pc, #44]	; (800085c <LoopFillZerobss+0x26>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800083a:	f7ff ffd7 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083e:	f006 f979 	bl	8006b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000842:	f7ff fe61 	bl	8000508 <main>
  bx  lr    
 8000846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000854:	08006c50 	.word	0x08006c50
  ldr r2, =_sbss
 8000858:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800085c:	20000054 	.word	0x20000054

08000860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <HAL_Init+0x40>)
 800086e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_Init+0x40>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_Init+0x40>)
 800087a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x40>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x40>)
 8000886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 fc97 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff ff0e 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023c00 	.word	0x40023c00

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fca1 	bl	800120e <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 fc77 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	20000050 	.word	0x20000050

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000050 	.word	0x20000050

08000948 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e0ed      	b.n	8000b36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fece 	bl	8000708 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f042 0201 	orr.w	r2, r2, #1
 800097a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800097c:	f7ff ffd8 	bl	8000930 <HAL_GetTick>
 8000980:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000982:	e012      	b.n	80009aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000984:	f7ff ffd4 	bl	8000930 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b0a      	cmp	r3, #10
 8000990:	d90b      	bls.n	80009aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2205      	movs	r2, #5
 80009a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e0c5      	b.n	8000b36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0e5      	beq.n	8000984 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 0202 	bic.w	r2, r2, #2
 80009c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c8:	f7ff ffb2 	bl	8000930 <HAL_GetTick>
 80009cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ce:	e012      	b.n	80009f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d0:	f7ff ffae 	bl	8000930 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	2b0a      	cmp	r3, #10
 80009dc:	d90b      	bls.n	80009f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2205      	movs	r2, #5
 80009ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e09f      	b.n	8000b36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1e5      	bne.n	80009d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7e1b      	ldrb	r3, [r3, #24]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d108      	bne.n	8000a1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e007      	b.n	8000a2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7e5b      	ldrb	r3, [r3, #25]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d108      	bne.n	8000a48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e007      	b.n	8000a58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7e9b      	ldrb	r3, [r3, #26]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d108      	bne.n	8000a72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0220 	orr.w	r2, r2, #32
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0220 	bic.w	r2, r2, #32
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7edb      	ldrb	r3, [r3, #27]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0210 	bic.w	r2, r2, #16
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0210 	orr.w	r2, r2, #16
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7f1b      	ldrb	r3, [r3, #28]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d108      	bne.n	8000ac6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0208 	orr.w	r2, r2, #8
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e007      	b.n	8000ad6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 0208 	bic.w	r2, r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7f5b      	ldrb	r3, [r3, #29]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d108      	bne.n	8000af0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f042 0204 	orr.w	r2, r2, #4
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0204 	bic.w	r2, r2, #4
 8000afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	ea42 0103 	orr.w	r1, r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	1e5a      	subs	r2, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d12e      	bne.n	8000bb0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2202      	movs	r2, #2
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b6a:	f7ff fee1 	bl	8000930 <HAL_GetTick>
 8000b6e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b70:	e012      	b.n	8000b98 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b72:	f7ff fedd 	bl	8000930 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	2b0a      	cmp	r3, #10
 8000b7e:	d90b      	bls.n	8000b98 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2205      	movs	r2, #5
 8000b90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e012      	b.n	8000bbe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1e5      	bne.n	8000b72 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e006      	b.n	8000bbe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
  }
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b089      	sub	sp, #36	; 0x24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000be4:	7ffb      	ldrb	r3, [r7, #31]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d003      	beq.n	8000bf2 <HAL_CAN_AddTxMessage+0x2c>
 8000bea:	7ffb      	ldrb	r3, [r7, #31]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	f040 80b8 	bne.w	8000d62 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10a      	bne.n	8000c12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 80a0 	beq.w	8000d52 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	0e1b      	lsrs	r3, r3, #24
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d907      	bls.n	8000c32 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e09e      	b.n	8000d70 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10d      	bne.n	8000c60 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c4e:	68f9      	ldr	r1, [r7, #12]
 8000c50:	6809      	ldr	r1, [r1, #0]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3318      	adds	r3, #24
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	440b      	add	r3, r1
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e00f      	b.n	8000c80 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c6a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c70:	68f9      	ldr	r1, [r7, #12]
 8000c72:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c74:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3318      	adds	r3, #24
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	440b      	add	r3, r1
 8000c7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	440b      	add	r3, r1
 8000c90:	3304      	adds	r3, #4
 8000c92:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	7d1b      	ldrb	r3, [r3, #20]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d111      	bne.n	8000cc0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3304      	adds	r3, #4
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	6811      	ldr	r1, [r2, #0]
 8000cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	440b      	add	r3, r1
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3307      	adds	r3, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	061a      	lsls	r2, r3, #24
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3306      	adds	r3, #6
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	041b      	lsls	r3, r3, #16
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3305      	adds	r3, #5
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	3204      	adds	r2, #4
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	6811      	ldr	r1, [r2, #0]
 8000ce8:	ea43 0200 	orr.w	r2, r3, r0
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	440b      	add	r3, r1
 8000cf2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000cf6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	061a      	lsls	r2, r3, #24
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3302      	adds	r3, #2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	4313      	orrs	r3, r2
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	7812      	ldrb	r2, [r2, #0]
 8000d18:	4610      	mov	r0, r2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	6811      	ldr	r1, [r2, #0]
 8000d1e:	ea43 0200 	orr.w	r2, r3, r0
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	440b      	add	r3, r1
 8000d28:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3318      	adds	r3, #24
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6811      	ldr	r1, [r2, #0]
 8000d40:	f043 0201 	orr.w	r2, r3, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3318      	adds	r3, #24
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	440b      	add	r3, r1
 8000d4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e00e      	b.n	8000d70 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e006      	b.n	8000d70 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
  }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3724      	adds	r7, #36	; 0x24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d002      	beq.n	8000d9c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d11d      	bne.n	8000dd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d003      	beq.n	8000e0a <HAL_CAN_GetRxMessage+0x24>
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	f040 80f3 	bne.w	8000ff0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10e      	bne.n	8000e2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0e7      	b.n	8000ffe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d107      	bne.n	8000e4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e0d8      	b.n	8000ffe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	331b      	adds	r3, #27
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0204 	and.w	r2, r3, #4
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10c      	bne.n	8000e84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	331b      	adds	r3, #27
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	0d5b      	lsrs	r3, r3, #21
 8000e7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	331b      	adds	r3, #27
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	08db      	lsrs	r3, r3, #3
 8000e94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	331b      	adds	r3, #27
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0202 	and.w	r2, r3, #2
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	331b      	adds	r3, #27
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 020f 	and.w	r2, r3, #15
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	331b      	adds	r3, #27
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	331b      	adds	r3, #27
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	4413      	add	r3, r2
 8000eee:	3304      	adds	r3, #4
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	4413      	add	r3, r2
 8000f04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0a1a      	lsrs	r2, r3, #8
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4413      	add	r3, r2
 8000f34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0c1a      	lsrs	r2, r3, #16
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	0e1a      	lsrs	r2, r3, #24
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3303      	adds	r3, #3
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	4413      	add	r3, r2
 8000f68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	0a1a      	lsrs	r2, r3, #8
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3305      	adds	r3, #5
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	0c1a      	lsrs	r2, r3, #16
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0e1a      	lsrs	r2, r3, #24
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	3307      	adds	r3, #7
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0220 	orr.w	r2, r2, #32
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	e007      	b.n	8000fec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0220 	orr.w	r2, r2, #32
 8000fea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	e006      	b.n	8000ffe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
  }
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d002      	beq.n	800102c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d10f      	bne.n	800104c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e005      	b.n	800104c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff47 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff5c 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffb0 	bl	800117c <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e165      	b.n	8001510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 8154 	bne.w	800150a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80ae 	beq.w	800150a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <HAL_GPIO_Init+0x300>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a5c      	ldr	r2, [pc, #368]	; (8001528 <HAL_GPIO_Init+0x300>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <HAL_GPIO_Init+0x300>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x304>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x308>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x21a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x216>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x310>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x212>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_GPIO_Init+0x314>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_GPIO_Init+0x318>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x20a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <HAL_GPIO_Init+0x31c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x206>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a49      	ldr	r2, [pc, #292]	; (8001548 <HAL_GPIO_Init+0x320>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x202>
 8001426:	2306      	movs	r3, #6
 8001428:	e00c      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 800142a:	2307      	movs	r3, #7
 800142c:	e00a      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 800142e:	2305      	movs	r3, #5
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 8001432:	2304      	movs	r3, #4
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x21c>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	; (800152c <HAL_GPIO_Init+0x304>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <HAL_GPIO_Init+0x324>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a31      	ldr	r2, [pc, #196]	; (800154c <HAL_GPIO_Init+0x324>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_GPIO_Init+0x324>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_GPIO_Init+0x324>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_GPIO_Init+0x324>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_GPIO_Init+0x324>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_GPIO_Init+0x324>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_GPIO_Init+0x324>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f ae96 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40021400 	.word	0x40021400
 8001548:	40021800 	.word	0x40021800
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff f9d8 	bl	8000930 <HAL_GetTick>
 8001580:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001582:	e009      	b.n	8001598 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001584:	f7ff f9d4 	bl	8000930 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001592:	d901      	bls.n	8001598 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e01f      	b.n	80015d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d1ee      	bne.n	8001584 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff f9c0 	bl	8000930 <HAL_GetTick>
 80015b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015b2:	e009      	b.n	80015c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b4:	f7ff f9bc 	bl	8000930 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c2:	d901      	bls.n	80015c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e007      	b.n	80015d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d4:	d1ee      	bne.n	80015b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	420e0040 	.word	0x420e0040
 80015e8:	40007000 	.word	0x40007000
 80015ec:	420e0044 	.word	0x420e0044

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff f926 	bl	8000930 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff f922 	bl	8000930 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f886 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	08006c1c 	.word	0x08006c1c
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b0a6      	sub	sp, #152	; 0x98
 80017c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e2:	4bc8      	ldr	r3, [pc, #800]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	f200 817e 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x330>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	08001aed 	.word	0x08001aed
 8001800:	08001aed 	.word	0x08001aed
 8001804:	08001aed 	.word	0x08001aed
 8001808:	08001835 	.word	0x08001835
 800180c:	08001aed 	.word	0x08001aed
 8001810:	08001aed 	.word	0x08001aed
 8001814:	08001aed 	.word	0x08001aed
 8001818:	0800183d 	.word	0x0800183d
 800181c:	08001aed 	.word	0x08001aed
 8001820:	08001aed 	.word	0x08001aed
 8001824:	08001aed 	.word	0x08001aed
 8001828:	080019a7 	.word	0x080019a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4bb6      	ldr	r3, [pc, #728]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x34c>)
 800182e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001832:	e15f      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4bb5      	ldr	r3, [pc, #724]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x350>)
 8001836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800183a:	e15b      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4bb1      	ldr	r3, [pc, #708]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001848:	4bae      	ldr	r3, [pc, #696]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d031      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4bab      	ldr	r3, [pc, #684]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	66bb      	str	r3, [r7, #104]	; 0x68
 800185e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
 8001868:	2300      	movs	r3, #0
 800186a:	667b      	str	r3, [r7, #100]	; 0x64
 800186c:	4ba7      	ldr	r3, [pc, #668]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x350>)
 800186e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001872:	462a      	mov	r2, r5
 8001874:	fb03 f202 	mul.w	r2, r3, r2
 8001878:	2300      	movs	r3, #0
 800187a:	4621      	mov	r1, r4
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	4aa2      	ldr	r2, [pc, #648]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x350>)
 8001884:	4621      	mov	r1, r4
 8001886:	fba1 1202 	umull	r1, r2, r1, r2
 800188a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800188c:	460a      	mov	r2, r1
 800188e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001890:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001892:	4413      	add	r3, r2
 8001894:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800189a:	2200      	movs	r2, #0
 800189c:	65bb      	str	r3, [r7, #88]	; 0x58
 800189e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80018a8:	f7fe fcac 	bl	8000204 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018b6:	e064      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b8:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	2200      	movs	r2, #0
 80018c0:	653b      	str	r3, [r7, #80]	; 0x50
 80018c2:	657a      	str	r2, [r7, #84]	; 0x54
 80018c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80018cc:	2300      	movs	r3, #0
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80018d4:	4622      	mov	r2, r4
 80018d6:	462b      	mov	r3, r5
 80018d8:	f04f 0000 	mov.w	r0, #0
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	0159      	lsls	r1, r3, #5
 80018e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e6:	0150      	lsls	r0, r2, #5
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4621      	mov	r1, r4
 80018ee:	1a51      	subs	r1, r2, r1
 80018f0:	6139      	str	r1, [r7, #16]
 80018f2:	4629      	mov	r1, r5
 80018f4:	eb63 0301 	sbc.w	r3, r3, r1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001906:	4659      	mov	r1, fp
 8001908:	018b      	lsls	r3, r1, #6
 800190a:	4651      	mov	r1, sl
 800190c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001910:	4651      	mov	r1, sl
 8001912:	018a      	lsls	r2, r1, #6
 8001914:	4651      	mov	r1, sl
 8001916:	ebb2 0801 	subs.w	r8, r2, r1
 800191a:	4659      	mov	r1, fp
 800191c:	eb63 0901 	sbc.w	r9, r3, r1
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800192c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001930:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001934:	4690      	mov	r8, r2
 8001936:	4699      	mov	r9, r3
 8001938:	4623      	mov	r3, r4
 800193a:	eb18 0303 	adds.w	r3, r8, r3
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	462b      	mov	r3, r5
 8001942:	eb49 0303 	adc.w	r3, r9, r3
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001954:	4629      	mov	r1, r5
 8001956:	028b      	lsls	r3, r1, #10
 8001958:	4621      	mov	r1, r4
 800195a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195e:	4621      	mov	r1, r4
 8001960:	028a      	lsls	r2, r1, #10
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800196a:	2200      	movs	r2, #0
 800196c:	643b      	str	r3, [r7, #64]	; 0x40
 800196e:	647a      	str	r2, [r7, #68]	; 0x44
 8001970:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001974:	f7fe fc46 	bl	8000204 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001982:	4b60      	ldr	r3, [pc, #384]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	3301      	adds	r3, #1
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001994:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80019a4:	e0a6      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a6:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d02a      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019d0:	2100      	movs	r1, #0
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x350>)
 80019d4:	fb03 f201 	mul.w	r2, r3, r1
 80019d8:	2300      	movs	r3, #0
 80019da:	fb00 f303 	mul.w	r3, r0, r3
 80019de:	4413      	add	r3, r2
 80019e0:	4a4a      	ldr	r2, [pc, #296]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x350>)
 80019e2:	fba0 1202 	umull	r1, r2, r0, r2
 80019e6:	677a      	str	r2, [r7, #116]	; 0x74
 80019e8:	460a      	mov	r2, r1
 80019ea:	673a      	str	r2, [r7, #112]	; 0x70
 80019ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019ee:	4413      	add	r3, r2
 80019f0:	677b      	str	r3, [r7, #116]	; 0x74
 80019f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019f6:	2200      	movs	r2, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
 80019fa:	637a      	str	r2, [r7, #52]	; 0x34
 80019fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a04:	f7fe fbfe 	bl	8000204 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a12:	e05b      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4e:	4649      	mov	r1, r9
 8001a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a68:	ebb2 040a 	subs.w	r4, r2, sl
 8001a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	61fa      	str	r2, [r7, #28]
 8001aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abe:	f7fe fba1 	bl	8000204 <__aeabi_uldivmod>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0f1b      	lsrs	r3, r3, #28
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001aea:	e003      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3798      	adds	r7, #152	; 0x98
 8001afc:	46bd      	mov	sp, r7
 8001afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	017d7840 	.word	0x017d7840

08001b10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e28d      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8083 	beq.w	8001c36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b30:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d019      	beq.n	8001b70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b3c:	4b91      	ldr	r3, [pc, #580]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b48:	4b8e      	ldr	r3, [pc, #568]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b54:	d00c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6e:	d10b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d05b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x124>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e25a      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x90>
 8001b92:	4b7c      	ldr	r3, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7b      	ldr	r2, [pc, #492]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xcc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xb4>
 8001baa:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xcc>
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6b      	ldr	r2, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe fea4 	bl	8000930 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7fe fea0 	bl	8000930 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e21f      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xdc>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fe90 	bl	8000930 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7fe fe8c 	bl	8000930 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e20b      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x104>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d06f      	beq.n	8001d22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c42:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d017      	beq.n	8001c7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c4e:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x186>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1d3      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4937      	ldr	r1, [pc, #220]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_RCC_OscConfig+0x278>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7fe fe39 	bl	8000930 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7fe fe35 	bl	8000930 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1b4      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4925      	ldr	r1, [pc, #148]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x278>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fe18 	bl	8000930 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d04:	f7fe fe14 	bl	8000930 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e193      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fdf8 	bl	8000930 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d44:	f7fe fdf4 	bl	8000930 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e173      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x234>
 8001d62:	e01b      	b.n	8001d9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_OscConfig+0x27c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fde1 	bl	8000930 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00e      	b.n	8001d90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7fe fddd 	bl	8000930 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e15c      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b8a      	ldr	r3, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ea      	bne.n	8001d72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8097 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a7e      	ldr	r2, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <HAL_RCC_OscConfig+0x4b0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x4b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x4b0>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7fe fd9d 	bl	8000930 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7fe fd99 	bl	8000930 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e118      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b6c      	ldr	r3, [pc, #432]	; (8001fc0 <HAL_RCC_OscConfig+0x4b0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x31e>
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x358>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x340>
 8001e36:	4b61      	ldr	r3, [pc, #388]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a60      	ldr	r2, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x358>
 8001e50:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7fe fd5e 	bl	8000930 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe fd5a 	bl	8000930 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0d7      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ee      	beq.n	8001e78 <HAL_RCC_OscConfig+0x368>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fd48 	bl	8000930 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fd44 	bl	8000930 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0c1      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80ad 	beq.w	800203c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d060      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d145      	bne.n	8001f82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_RCC_OscConfig+0x4b4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe fd18 	bl	8000930 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7fe fd14 	bl	8000930 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e093      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	071b      	lsls	r3, r3, #28
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4b4>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fce9 	bl	8000930 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fce5 	bl	8000930 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e064      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x452>
 8001f80:	e05c      	b.n	800203c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCC_OscConfig+0x4b4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe fcd2 	bl	8000930 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fcce 	bl	8000930 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04d      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x480>
 8001fae:	e045      	b.n	800203c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e040      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_RCC_OscConfig+0x538>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d030      	beq.n	8002038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d129      	bne.n	8002038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d122      	bne.n	8002038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002000:	4293      	cmp	r3, r2
 8002002:	d119      	bne.n	8002038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	3b01      	subs	r3, #1
 8002012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d10f      	bne.n	8002038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
 8002050:	2300      	movs	r3, #0
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	f1c3 031f 	rsb	r3, r3, #31
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_ZN6CRSLib3Can6RM03909PillarboxC1EP19__CAN_HandleTypeDef>:
	class Pillarbox final
	{
		CAN_HandleTypeDef * hcan;

	public:
		Pillarbox(CAN_HandleTypeDef *const hcan) noexcept:
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
			hcan{hcan}
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	601a      	str	r2, [r3, #0]
		{}
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE>:

		void post(const u32 id, TxFrame& frame) noexcept
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b08d      	sub	sp, #52	; 0x34
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
				.ExtId = id >> (u32)11,
				.IDE = (id >> (u32)11) ? CAN_ID_EXT : CAN_ID_STD,
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
				.DLC = frame.header.dlc,
				.TransmitGlobalTime = frame.header.transmit_global_time ? ENABLE : DISABLE
			};
 80020aa:	61bb      	str	r3, [r7, #24]
				.ExtId = id >> (u32)11,
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0adb      	lsrs	r3, r3, #11
			};
 80020b0:	61fb      	str	r3, [r7, #28]
				.IDE = (id >> (u32)11) ? CAN_ID_EXT : CAN_ID_STD,
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	0adb      	lsrs	r3, r3, #11
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE+0x26>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e000      	b.n	80020c0 <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE+0x28>
 80020be:	2300      	movs	r3, #0
			};
 80020c0:	623b      	str	r3, [r7, #32]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	785b      	ldrb	r3, [r3, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE+0x36>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e000      	b.n	80020d0 <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE+0x38>
 80020ce:	2300      	movs	r3, #0
			};
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
				.DLC = frame.header.dlc,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	781b      	ldrb	r3, [r3, #0]
			};
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
				.TransmitGlobalTime = frame.header.transmit_global_time ? ENABLE : DISABLE
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	789b      	ldrb	r3, [r3, #2]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE+0x4c>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE+0x4e>
 80020e4:	2300      	movs	r3, #0
			};
 80020e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			u32 mailbox{};
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681c      	ldr	r4, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3303      	adds	r3, #3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f9aa 	bl	8002450 <_ZNSt5arrayIhLj8EE4dataEv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	f107 0118 	add.w	r1, r7, #24
 8002106:	4620      	mov	r0, r4
 8002108:	f7fe fd5d 	bl	8000bc6 <HAL_CAN_AddTxMessage>
		}
 800210c:	bf00      	nop
 800210e:	3734      	adds	r7, #52	; 0x34
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}

08002114 <_ZNK6CRSLib3Can6RM03909Pillarbox8not_fullEv>:

		bool not_full() const noexcept
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fe2b 	bl	8000d7c <HAL_CAN_GetTxMailboxesFreeLevel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
		}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE>:
		rate1M = 1000000
	};

	// 定義してね
	inline constexpr i_ptr can_instance(CanX can_x) noexcept
	{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
		switch(can_x)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x16>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d002      	beq.n	8002156 <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x1a>
 8002150:	e003      	b.n	800215a <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x1e>
		{
		case CanX::can1:
			return static_cast<i_ptr>(0x4000'6400);
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x2c>)
 8002154:	e002      	b.n	800215c <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x20>
		case CanX::can2:
			return static_cast<i_ptr>(0x4000'6800);
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x30>)
 8002158:	e000      	b.n	800215c <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE+0x20>
		}
		return 0;
 800215a:	2300      	movs	r3, #0
	}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40006400 	.word	0x40006400
 800216c:	40006800 	.word	0x40006800

08002170 <_ZN6CRSLib3Can6RM03909LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>:
	{
		CAN_HandleTypeDef * hcan;
		FifoIndex fifo_index;

	public:
		Letterbox(CAN_HandleTypeDef *const hcan, const FifoIndex fifo_index) noexcept:
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
			hcan{hcan},
			fifo_index{fifo_index}
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
		{}
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_ZN6CRSLib13to_underlyingINS_3Can6RM03909FifoIndexEEEDaT_>:

namespace CRSLib
{
	template<class Enum>
	requires std::is_enum_v<Enum>
	constexpr auto to_underlying(const Enum x) noexcept
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
	{
		return static_cast<std::underlying_type_t<Enum>>(x);
 800219e:	687b      	ldr	r3, [r7, #4]
	}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_ZN6CRSLib3Can6RM03909Letterbox7receiveERNS1_7RxFrameE>:

		void receive(RxFrame& frame) noexcept
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
		{
			CAN_RxHeaderTypeDef rx_header{};
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	619a      	str	r2, [r3, #24]

			HAL_CAN_GetRxMessage(hcan, to_underlying(fifo_index), &rx_header, frame.data.data());
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681c      	ldr	r4, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffdf 	bl	8002196 <_ZN6CRSLib13to_underlyingINS_3Can6RM03909FifoIndexEEEDaT_>
 80021d8:	4605      	mov	r5, r0
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3310      	adds	r3, #16
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f936 	bl	8002450 <_ZNSt5arrayIhLj8EE4dataEv>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f107 020c 	add.w	r2, r7, #12
 80021ea:	4629      	mov	r1, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7fe fdfa 	bl	8000de6 <HAL_CAN_GetRxMessage>

			frame.header =
			{
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	02da      	lsls	r2, r3, #11
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ea42 0003 	orr.w	r0, r2, r3
				.time_stamp = rx_header.Timestamp,
 80021fc:	6a39      	ldr	r1, [r7, #32]
				.filter_match_index = rx_header.FilterMatchIndex,
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
				.dlc = static_cast<u8>(rx_header.DLC),
 8002200:	69fb      	ldr	r3, [r7, #28]
			frame.header =
 8002202:	b2dd      	uxtb	r5, r3
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b02      	cmp	r3, #2
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2dc      	uxtb	r4, r3
			frame.header =
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6018      	str	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6059      	str	r1, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	462a      	mov	r2, r5
 8002220:	731a      	strb	r2, [r3, #12]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	4622      	mov	r2, r4
 8002226:	735a      	strb	r2, [r3, #13]
			};
		}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}

08002230 <_ZNK6CRSLib3Can6RM03909Letterbox5emptyEv>:

		bool empty() const noexcept
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
		{
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681c      	ldr	r4, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffa8 	bl	8002196 <_ZN6CRSLib13to_underlyingINS_3Can6RM03909FifoIndexEEEDaT_>
 8002246:	4603      	mov	r3, r0
 8002248:	4619      	mov	r1, r3
 800224a:	4620      	mov	r0, r4
 800224c:	f7fe fedd 	bl	800100a <HAL_CAN_GetRxFifoFillLevel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
		}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <_ZN6CRSLib3Can6RM039010CanManagerC1EP19__CAN_HandleTypeDef>:
	{
		Pillarbox pillarbox;
		Letterbox letterbox0;
		Letterbox letterbox1;

		CanManager(CAN_HandleTypeDef *const hcan) noexcept:
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
			pillarbox{hcan},
			letterbox0{hcan, FifoIndex::fifo0},
			letterbox1{hcan, FifoIndex::fifo1}
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff01 	bl	800207a <_ZN6CRSLib3Can6RM03909PillarboxC1EP19__CAN_HandleTypeDef>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	2200      	movs	r2, #0
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff75 	bl	8002170 <_ZN6CRSLib3Can6RM03909LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	330c      	adds	r3, #12
 800228a:	2201      	movs	r2, #1
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff6e 	bl	8002170 <_ZN6CRSLib3Can6RM03909LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>
		{}
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <_ZZN6CRSLib3Can6RM039013FilterManager18dynamic_initializeEvENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaS4_>:
		set_bit(bxcan1->FA1R, (u32)activate << index);
	}

	inline void dynamic_initialize() noexcept
	{
		[]<u8 ... indices>(std::integer_sequence<u8, indices ...>)
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	b0a2      	sub	sp, #136	; 0x88
 80022a4:	af1a      	add	r7, sp, #104	; 0x68
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	7039      	strb	r1, [r7, #0]
		{
			constexpr FrameFeature<FilterWidth::bit32> null_feature{.std_id = max_std_id, .ext_id = max_ext_id};
 80022aa:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80022ae:	61fb      	str	r3, [r7, #28]
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <_ZZN6CRSLib3Can6RM039013FilterManager18dynamic_initializeEvENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaS4_+0xd4>)
 80022b2:	f107 0408 	add.w	r4, r7, #8
 80022b6:	461d      	mov	r5, r3
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	6023      	str	r3, [r4, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 80022c0:	f107 0008 	add.w	r0, r7, #8
 80022c4:	f107 0208 	add.w	r2, r7, #8
 80022c8:	f107 0108 	add.w	r1, r7, #8
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	9318      	str	r3, [sp, #96]	; 0x60
 80022d2:	f107 0308 	add.w	r3, r7, #8
 80022d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	9316      	str	r3, [sp, #88]	; 0x58
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	9315      	str	r3, [sp, #84]	; 0x54
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	9314      	str	r3, [sp, #80]	; 0x50
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	9312      	str	r3, [sp, #72]	; 0x48
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	9311      	str	r3, [sp, #68]	; 0x44
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	9310      	str	r3, [sp, #64]	; 0x40
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	930f      	str	r3, [sp, #60]	; 0x3c
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	930e      	str	r3, [sp, #56]	; 0x38
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	930d      	str	r3, [sp, #52]	; 0x34
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	930c      	str	r3, [sp, #48]	; 0x30
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002320:	f107 0308 	add.w	r3, r7, #8
 8002324:	930a      	str	r3, [sp, #40]	; 0x28
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	9309      	str	r3, [sp, #36]	; 0x24
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	9308      	str	r3, [sp, #32]
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	9307      	str	r3, [sp, #28]
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	9306      	str	r3, [sp, #24]
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	9304      	str	r3, [sp, #16]
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	9303      	str	r3, [sp, #12]
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 0308 	add.w	r3, r7, #8
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4603      	mov	r3, r0
 8002364:	201c      	movs	r0, #28
 8002366:	f000 f961 	bl	800262c <_ZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		}(std::make_integer_sequence<u8, Config::filter_bank_total_size>());
 800236a:	bf00      	nop
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
 8002372:	bf00      	nop
 8002374:	08006bf4 	.word	0x08006bf4

08002378 <_ZN6CRSLib3Can6RM039013FilterManager18dynamic_initializeEv>:
	{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
		}(std::make_integer_sequence<u8, Config::filter_bank_total_size>());
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff8c 	bl	80022a0 <_ZZN6CRSLib3Can6RM039013FilterManager18dynamic_initializeEvENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaS4_>
	}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <main_cpp>:
using namespace CRSLib::Can::RM0390;

extern "C"
{
	void main_cpp(CAN_HandleTypeDef *const hcan)
	{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
		CanManager can_manager{hcan};
 8002398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff60 	bl	8002264 <_ZN6CRSLib3Can6RM039010CanManagerC1EP19__CAN_HandleTypeDef>

		FilterManager::dynamic_initialize();
 80023a4:	f7ff ffe8 	bl	8002378 <_ZN6CRSLib3Can6RM039013FilterManager18dynamic_initializeEv>

		FilterManager::ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filter_arg
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <main_cpp+0xbc>)
 80023aa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80023ae:	461d      	mov	r5, r3
 80023b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	6023      	str	r3, [r4, #0]
			FifoIndex::fifo0,
			0,
			true
		};

		FilterManager::config_filter_bank(15, filter_arg);
 80023b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023bc:	4619      	mov	r1, r3
 80023be:	200f      	movs	r0, #15
 80023c0:	f000 f9ef 	bl	80027a2 <_ZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>

		HAL_CAN_Start(hcan);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fbba 	bl	8000b3e <HAL_CAN_Start>

		while(true)
		{
			RxFrame rx_frame{};
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	615a      	str	r2, [r3, #20]
			if(!can_manager.letterbox0.empty())
 80023dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023e0:	3304      	adds	r3, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff24 	bl	8002230 <_ZNK6CRSLib3Can6RM03909Letterbox5emptyEv>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ea      	beq.n	80023ca <main_cpp+0x3a>
			{
				can_manager.letterbox0.receive(rx_frame);
 80023f4:	f107 0218 	add.w	r2, r7, #24
 80023f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023fc:	3304      	adds	r3, #4
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fed3 	bl	80021ac <_ZN6CRSLib3Can6RM03909Letterbox7receiveERNS1_7RxFrameE>

				TxFrame tx_frame{{rx_frame.header.dlc}, rx_frame.data};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	f8c3 2007 	str.w	r2, [r3, #7]
 8002414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002418:	733b      	strb	r3, [r7, #12]
 800241a:	f107 020f 	add.w	r2, r7, #15
 800241e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002422:	cb03      	ldmia	r3!, {r0, r1}
 8002424:	6010      	str	r0, [r2, #0]
 8002426:	6051      	str	r1, [r2, #4]

				if(can_manager.pillarbox.not_full()) can_manager.pillarbox.post(0x100, tx_frame);
 8002428:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fe71 	bl	8002114 <_ZNK6CRSLib3Can6RM03909Pillarbox8not_fullEv>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0c8      	beq.n	80023ca <main_cpp+0x3a>
 8002438:	f107 020c 	add.w	r2, r7, #12
 800243c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fe27 	bl	8002098 <_ZN6CRSLib3Can6RM03909Pillarbox4postEmRNS1_7TxFrameE>
			}
		}
 800244a:	e7be      	b.n	80023ca <main_cpp+0x3a>
 800244c:	08006c08 	.word	0x08006c08

08002450 <_ZNSt5arrayIhLj8EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f9dd 	bl	800281a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>:
#pragma once

namespace CRSLib
{
	inline constexpr void clear_bit(volatile auto& bit, const auto reg)
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
	{
		bit = bit & ~reg;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	43db      	mvns	r3, r3
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
	}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>:
	inline constexpr void clear_bit(auto& bit, const auto reg)
	{
		bit &= ~reg;
	}

	inline constexpr void set_bit(volatile auto& bit, const auto reg)
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	{
		bit = bit | reg;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
	}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_ZZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEJNS6_ILS4_0ELS5_1EEESH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_EEEDaSB_SE_>:
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	7239      	strb	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 ff41 	bl	8003362 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 ff89 	bl	80033fe <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80024f0:	69b9      	ldr	r1, [r7, #24]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ffd1 	bl	800349a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80024fc:	69f9      	ldr	r1, [r7, #28]
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 f819 	bl	8003536 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f861 	bl	80035d2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002516:	4618      	mov	r0, r3
 8002518:	f001 f8a9 	bl	800366e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f8f1 	bl	800370a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 800252c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800252e:	4618      	mov	r0, r3
 8002530:	f001 f939 	bl	80037a6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800253a:	4618      	mov	r0, r3
 800253c:	f001 f981 	bl	8003842 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002544:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f9d0 	bl	80038ec <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fa1f 	bl	8003996 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 800255c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fa6e 	bl	8003a40 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fabd 	bl	8003aea <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002574:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002576:	4618      	mov	r0, r3
 8002578:	f001 fb0c 	bl	8003b94 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002580:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002582:	4618      	mov	r0, r3
 8002584:	f001 fb5b 	bl	8003c3e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh14ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 800258c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800258e:	4618      	mov	r0, r3
 8002590:	f001 fbaa 	bl	8003ce8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh15ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002598:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800259a:	4618      	mov	r0, r3
 800259c:	f001 fbf9 	bl	8003d92 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh16ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fc48 	bl	8003e3c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh17ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fc97 	bl	8003ee6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh18ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fce6 	bl	8003f90 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh19ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fd35 	bl	800403a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh20ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fd84 	bl	80040e4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh21ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fdd3 	bl	800418e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh22ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fe22 	bl	8004238 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh23ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 80025f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fe71 	bl	80042e2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh24ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002604:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002606:	4618      	mov	r0, r3
 8002608:	f001 fec0 	bl	800438c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh25ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002610:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002612:	4618      	mov	r0, r3
 8002614:	f001 ff0f 	bl	8004436 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh26ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 800261c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800261e:	4618      	mov	r0, r3
 8002620:	f001 ff5e 	bl	80044e0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh27ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b0a1      	sub	sp, #132	; 0x84
 8002630:	af1a      	add	r7, sp, #104	; 0x68
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 800263c:	7bf8      	ldrb	r0, [r7, #15]
 800263e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002642:	9318      	str	r3, [sp, #96]	; 0x60
 8002644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002648:	9317      	str	r3, [sp, #92]	; 0x5c
 800264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800264e:	9316      	str	r3, [sp, #88]	; 0x58
 8002650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002652:	9315      	str	r3, [sp, #84]	; 0x54
 8002654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002656:	9314      	str	r3, [sp, #80]	; 0x50
 8002658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265a:	9313      	str	r3, [sp, #76]	; 0x4c
 800265c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800265e:	9312      	str	r3, [sp, #72]	; 0x48
 8002660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002662:	9311      	str	r3, [sp, #68]	; 0x44
 8002664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002666:	9310      	str	r3, [sp, #64]	; 0x40
 8002668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266a:	930f      	str	r3, [sp, #60]	; 0x3c
 800266c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800266e:	930e      	str	r3, [sp, #56]	; 0x38
 8002670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002672:	930d      	str	r3, [sp, #52]	; 0x34
 8002674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002676:	930c      	str	r3, [sp, #48]	; 0x30
 8002678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267a:	930b      	str	r3, [sp, #44]	; 0x2c
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	930a      	str	r3, [sp, #40]	; 0x28
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	9309      	str	r3, [sp, #36]	; 0x24
 8002684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002686:	9308      	str	r3, [sp, #32]
 8002688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800268a:	9307      	str	r3, [sp, #28]
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	9306      	str	r3, [sp, #24]
 8002690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002692:	9305      	str	r3, [sp, #20]
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	9304      	str	r3, [sp, #16]
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	9303      	str	r3, [sp, #12]
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	f000 fc63 	bl	8002f78 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		CAN_TypeDef *const bxcan1 = (CAN_TypeDef *)can_instance(CanX::can1);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7ff fd42 	bl	800213c <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE>
 80026b8:	4603      	mov	r3, r0
 80026ba:	617b      	str	r3, [r7, #20]
		set_bit(bxcan1->FMR, CAN_FMR_FINIT);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026c2:	2101      	movs	r1, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff feed 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		clear_bit(bxcan1->FMR, CAN_FMR_CAN2SB);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026d0:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fed3 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
		set_bit(bxcan1->FMR, can2_start << CAN_FMR_CAN2SB_Pos);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	f000 fe2a 	bl	8003340 <_ZN6CRSLib7set_bitImiEEvRVT_T0_>
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	f107 0010 	add.w	r0, r7, #16
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f8:	9319      	str	r3, [sp, #100]	; 0x64
 80026fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026fe:	9318      	str	r3, [sp, #96]	; 0x60
 8002700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002704:	9317      	str	r3, [sp, #92]	; 0x5c
 8002706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002708:	9316      	str	r3, [sp, #88]	; 0x58
 800270a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270c:	9315      	str	r3, [sp, #84]	; 0x54
 800270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002710:	9314      	str	r3, [sp, #80]	; 0x50
 8002712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002714:	9313      	str	r3, [sp, #76]	; 0x4c
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	9312      	str	r3, [sp, #72]	; 0x48
 800271a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271c:	9311      	str	r3, [sp, #68]	; 0x44
 800271e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002720:	9310      	str	r3, [sp, #64]	; 0x40
 8002722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002724:	930f      	str	r3, [sp, #60]	; 0x3c
 8002726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002728:	930e      	str	r3, [sp, #56]	; 0x38
 800272a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272c:	930d      	str	r3, [sp, #52]	; 0x34
 800272e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002730:	930c      	str	r3, [sp, #48]	; 0x30
 8002732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002734:	930b      	str	r3, [sp, #44]	; 0x2c
 8002736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002738:	930a      	str	r3, [sp, #40]	; 0x28
 800273a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273c:	9309      	str	r3, [sp, #36]	; 0x24
 800273e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002740:	9308      	str	r3, [sp, #32]
 8002742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002744:	9307      	str	r3, [sp, #28]
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	9306      	str	r3, [sp, #24]
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	9305      	str	r3, [sp, #20]
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	9304      	str	r3, [sp, #16]
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	9303      	str	r3, [sp, #12]
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	4621      	mov	r1, r4
 8002768:	f7ff fead 	bl	80024c6 <_ZZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEJNS6_ILS4_0ELS5_1EEESH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_EEEDaSB_SE_>
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fe83 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}

08002782 <_ZZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0EEJNS6_ILS4_0ELS5_0EEEEEEDaSB_SE_>:
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	7239      	strb	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	f002 f853 	bl	8004840 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	6039      	str	r1, [r7, #0]
 80027ac:	71fb      	strb	r3, [r7, #7]
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 ffda 	bl	800476c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		CAN_TypeDef *const bxcan1 = (CAN_TypeDef *)can_instance(CanX::can1);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff fcbf 	bl	800213c <_ZN6CRSLib3Can6RM039012can_instanceENS1_4CanXE>
 80027be:	4603      	mov	r3, r0
 80027c0:	60fb      	str	r3, [r7, #12]
		set_bit(bxcan1->FMR, CAN_FMR_FINIT);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fe6a 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		clear_bit(bxcan1->FMR, CAN_FMR_CAN2SB);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027d6:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fe50 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
		set_bit(bxcan1->FMR, can2_start << CAN_FMR_CAN2SB_Pos);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f000 fda7 	bl	8003340 <_ZN6CRSLib7set_bitImiEEvRVT_T0_>
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4621      	mov	r1, r4
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ffbf 	bl	8002782 <_ZZN6CRSLib3Can6RM039013FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0EEJNS6_ILS4_0ELS5_0EEEEEEDaSB_SE_>
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800280a:	2101      	movs	r1, #1
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fe37 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}

0800281a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaSD_>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002834:	b099      	sub	sp, #100	; 0x64
 8002836:	af00      	add	r7, sp, #0
 8002838:	65f8      	str	r0, [r7, #92]	; 0x5c
 800283a:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	685c      	ldr	r4, [r3, #4]
 8002842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002844:	7819      	ldrb	r1, [r3, #0]
 8002846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002848:	689b      	ldr	r3, [r3, #8]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800284a:	461a      	mov	r2, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f000 f95b 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002852:	4603      	mov	r3, r0
 8002854:	657b      	str	r3, [r7, #84]	; 0x54
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002858:	7819      	ldrb	r1, [r3, #0]
 800285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285c:	68db      	ldr	r3, [r3, #12]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800285e:	461a      	mov	r2, r3
 8002860:	2001      	movs	r0, #1
 8002862:	f000 f951 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002866:	4603      	mov	r3, r0
 8002868:	653b      	str	r3, [r7, #80]	; 0x50
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800286a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286c:	7819      	ldrb	r1, [r3, #0]
 800286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002870:	691b      	ldr	r3, [r3, #16]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002872:	461a      	mov	r2, r3
 8002874:	2002      	movs	r0, #2
 8002876:	f000 f947 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 800287a:	4603      	mov	r3, r0
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800287e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002880:	7819      	ldrb	r1, [r3, #0]
 8002882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002884:	695b      	ldr	r3, [r3, #20]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002886:	461a      	mov	r2, r3
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f93d 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 800288e:	4603      	mov	r3, r0
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002898:	699b      	ldr	r3, [r3, #24]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800289a:	461a      	mov	r2, r3
 800289c:	2004      	movs	r0, #4
 800289e:	f000 f933 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80028a2:	4603      	mov	r3, r0
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80028a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a8:	7819      	ldrb	r1, [r3, #0]
 80028aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ac:	69db      	ldr	r3, [r3, #28]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80028ae:	461a      	mov	r2, r3
 80028b0:	2005      	movs	r0, #5
 80028b2:	f000 f929 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80028b6:	4603      	mov	r3, r0
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	7819      	ldrb	r1, [r3, #0]
 80028be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c0:	6a1b      	ldr	r3, [r3, #32]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80028c2:	461a      	mov	r2, r3
 80028c4:	2006      	movs	r0, #6
 80028c6:	f000 f91f 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80028ca:	4603      	mov	r3, r0
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80028ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d0:	7819      	ldrb	r1, [r3, #0]
 80028d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80028d6:	461a      	mov	r2, r3
 80028d8:	2007      	movs	r0, #7
 80028da:	f000 f915 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80028de:	4603      	mov	r3, r0
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80028e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e4:	7819      	ldrb	r1, [r3, #0]
 80028e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80028ea:	461a      	mov	r2, r3
 80028ec:	2008      	movs	r0, #8
 80028ee:	f000 f90b 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80028f2:	4603      	mov	r3, r0
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80028f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f8:	7819      	ldrb	r1, [r3, #0]
 80028fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80028fe:	461a      	mov	r2, r3
 8002900:	2009      	movs	r0, #9
 8002902:	f000 f901 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002906:	4603      	mov	r3, r0
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	7819      	ldrb	r1, [r3, #0]
 800290e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002912:	461a      	mov	r2, r3
 8002914:	200a      	movs	r0, #10
 8002916:	f000 f8f7 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 800291a:	4603      	mov	r3, r0
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800291e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002920:	7819      	ldrb	r1, [r3, #0]
 8002922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002926:	461a      	mov	r2, r3
 8002928:	200b      	movs	r0, #11
 800292a:	f000 f8ed 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 800292e:	4603      	mov	r3, r0
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	7819      	ldrb	r1, [r3, #0]
 8002936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800293a:	461a      	mov	r2, r3
 800293c:	200c      	movs	r0, #12
 800293e:	f000 f8e3 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002942:	4603      	mov	r3, r0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002948:	7819      	ldrb	r1, [r3, #0]
 800294a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800294e:	461a      	mov	r2, r3
 8002950:	200d      	movs	r0, #13
 8002952:	f000 f8d9 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002956:	4603      	mov	r3, r0
 8002958:	623b      	str	r3, [r7, #32]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800295a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295c:	7819      	ldrb	r1, [r3, #0]
 800295e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002962:	461a      	mov	r2, r3
 8002964:	200e      	movs	r0, #14
 8002966:	f000 f8cf 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 800296a:	4603      	mov	r3, r0
 800296c:	61fb      	str	r3, [r7, #28]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	7819      	ldrb	r1, [r3, #0]
 8002972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002976:	461a      	mov	r2, r3
 8002978:	200f      	movs	r0, #15
 800297a:	f000 f8c5 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 800297e:	4603      	mov	r3, r0
 8002980:	61bb      	str	r3, [r7, #24]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002984:	7819      	ldrb	r1, [r3, #0]
 8002986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800298a:	461a      	mov	r2, r3
 800298c:	2010      	movs	r0, #16
 800298e:	f000 f8bb 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002992:	4603      	mov	r3, r0
 8002994:	617b      	str	r3, [r7, #20]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	7819      	ldrb	r1, [r3, #0]
 800299a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800299e:	461a      	mov	r2, r3
 80029a0:	2011      	movs	r0, #17
 80029a2:	f000 f8b1 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80029a6:	4603      	mov	r3, r0
 80029a8:	613b      	str	r3, [r7, #16]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80029aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ac:	7819      	ldrb	r1, [r3, #0]
 80029ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80029b2:	461a      	mov	r2, r3
 80029b4:	2012      	movs	r0, #18
 80029b6:	f000 f8a7 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80029ba:	4603      	mov	r3, r0
 80029bc:	60fb      	str	r3, [r7, #12]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80029be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c0:	7819      	ldrb	r1, [r3, #0]
 80029c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80029c6:	461a      	mov	r2, r3
 80029c8:	2013      	movs	r0, #19
 80029ca:	f000 f89d 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80029ce:	4603      	mov	r3, r0
 80029d0:	60bb      	str	r3, [r7, #8]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80029d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d4:	7819      	ldrb	r1, [r3, #0]
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80029da:	461a      	mov	r2, r3
 80029dc:	2014      	movs	r0, #20
 80029de:	f000 f893 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80029e2:	4603      	mov	r3, r0
 80029e4:	607b      	str	r3, [r7, #4]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80029e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e8:	7819      	ldrb	r1, [r3, #0]
 80029ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80029ee:	461a      	mov	r2, r3
 80029f0:	2015      	movs	r0, #21
 80029f2:	f000 f889 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80029f6:	4603      	mov	r3, r0
 80029f8:	469b      	mov	fp, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80029fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fc:	7819      	ldrb	r1, [r3, #0]
 80029fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002a02:	461a      	mov	r2, r3
 8002a04:	2016      	movs	r0, #22
 8002a06:	f000 f87f 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	469a      	mov	sl, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	7819      	ldrb	r1, [r3, #0]
 8002a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002a16:	461a      	mov	r2, r3
 8002a18:	2017      	movs	r0, #23
 8002a1a:	f000 f875 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4699      	mov	r9, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	7819      	ldrb	r1, [r3, #0]
 8002a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2018      	movs	r0, #24
 8002a2e:	f000 f86b 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4698      	mov	r8, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a38:	7819      	ldrb	r1, [r3, #0]
 8002a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2019      	movs	r0, #25
 8002a42:	f000 f861 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461e      	mov	r6, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	7819      	ldrb	r1, [r3, #0]
 8002a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002a52:	461a      	mov	r2, r3
 8002a54:	201a      	movs	r0, #26
 8002a56:	f000 f857 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461d      	mov	r5, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a60:	7819      	ldrb	r1, [r3, #0]
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8002a66:	461a      	mov	r2, r3
 8002a68:	201b      	movs	r0, #27
 8002a6a:	f000 f84d 	bl	8002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002a76:	7023      	strb	r3, [r4, #0]
 8002a78:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a7c:	7063      	strb	r3, [r4, #1]
 8002a7e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a82:	70a3      	strb	r3, [r4, #2]
 8002a84:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a88:	70e3      	strb	r3, [r4, #3]
 8002a8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a8e:	7123      	strb	r3, [r4, #4]
 8002a90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002a94:	7163      	strb	r3, [r4, #5]
 8002a96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a9a:	71a3      	strb	r3, [r4, #6]
 8002a9c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002aa0:	71e3      	strb	r3, [r4, #7]
 8002aa2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002aa6:	7223      	strb	r3, [r4, #8]
 8002aa8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002aac:	7263      	strb	r3, [r4, #9]
 8002aae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ab2:	72a3      	strb	r3, [r4, #10]
 8002ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ab8:	72e3      	strb	r3, [r4, #11]
 8002aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002abe:	7323      	strb	r3, [r4, #12]
 8002ac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ac4:	7363      	strb	r3, [r4, #13]
 8002ac6:	7f3b      	ldrb	r3, [r7, #28]
 8002ac8:	73a3      	strb	r3, [r4, #14]
 8002aca:	7e3b      	ldrb	r3, [r7, #24]
 8002acc:	73e3      	strb	r3, [r4, #15]
 8002ace:	7d3b      	ldrb	r3, [r7, #20]
 8002ad0:	7423      	strb	r3, [r4, #16]
 8002ad2:	7c3b      	ldrb	r3, [r7, #16]
 8002ad4:	7463      	strb	r3, [r4, #17]
 8002ad6:	7b3b      	ldrb	r3, [r7, #12]
 8002ad8:	74a3      	strb	r3, [r4, #18]
 8002ada:	7a3b      	ldrb	r3, [r7, #8]
 8002adc:	74e3      	strb	r3, [r4, #19]
 8002ade:	793b      	ldrb	r3, [r7, #4]
 8002ae0:	7523      	strb	r3, [r4, #20]
 8002ae2:	465b      	mov	r3, fp
 8002ae4:	7563      	strb	r3, [r4, #21]
 8002ae6:	4653      	mov	r3, sl
 8002ae8:	75a3      	strb	r3, [r4, #22]
 8002aea:	464b      	mov	r3, r9
 8002aec:	75e3      	strb	r3, [r4, #23]
 8002aee:	4643      	mov	r3, r8
 8002af0:	7623      	strb	r3, [r4, #24]
 8002af2:	4633      	mov	r3, r6
 8002af4:	7663      	strb	r3, [r4, #25]
 8002af6:	462b      	mov	r3, r5
 8002af8:	76a3      	strb	r3, [r4, #26]
 8002afa:	4613      	mov	r3, r2
 8002afc:	76e3      	strb	r3, [r4, #27]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002afe:	bf00      	nop
 8002b00:	3764      	adds	r7, #100	; 0x64
 8002b02:	46bd      	mov	sp, r7
 8002b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b08 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	603a      	str	r2, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	460b      	mov	r3, r1
 8002b16:	71bb      	strb	r3, [r7, #6]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8002b18:	79ba      	ldrb	r2, [r7, #6]
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d801      	bhi.n	8002b24 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c>
 8002b20:	2220      	movs	r2, #32
 8002b22:	e000      	b.n	8002b26 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1e>
 8002b24:	2200      	movs	r2, #0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2a>
 8002b2e:	2310      	movs	r3, #16
 8002b30:	e000      	b.n	8002b34 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2c>
 8002b32:	2300      	movs	r3, #0
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b25a      	sxtb	r2, r3
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
		}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj28EEEEDaOT_>:
    public:
      template<__maybe_borrowed_range _Tp>
	requires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>
	  || __adl_begin<_Tp>
	constexpr auto
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
	      using _Up = remove_all_extents_t<remove_reference_t<_Tp>>;
	      static_assert(sizeof(_Up) != 0, "not array of incomplete type");
	      return __t + 0;
	    }
	  else if constexpr (__member_begin<_Tp>)
	    return __t.begin();
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f001 febf 	bl	80048dc <_ZNSt5arrayIhLj28EE5beginEv>
 8002b5e:	4603      	mov	r3, r0
	  else
	    return begin(__t);
	}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj28EEEEDaOT_>:
    public:
      template<__maybe_borrowed_range _Tp>
	requires is_bounded_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>
	|| __adl_end<_Tp>
	constexpr auto
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
	    {
	      static_assert(is_lvalue_reference_v<_Tp>);
	      return __t + extent_v<remove_reference_t<_Tp>>;
	    }
	  else if constexpr (__member_end<_Tp>)
	    return __t.end();
 8002b72:	6838      	ldr	r0, [r7, #0]
 8002b74:	f001 febe 	bl	80048f4 <_ZNSt5arrayIhLj28EE3endEv>
 8002b78:	4603      	mov	r3, r0
	  else
	    return end(__t);
	}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>:

    template<random_access_range _Range,
	     typename _Comp = ranges::less, typename _Proj = identity>
      requires sortable<iterator_t<_Range>, _Comp, _Proj>
      constexpr borrowed_iterator_t<_Range>
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8002b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	713a      	strb	r2, [r7, #4]
 8002b92:	703b      	strb	r3, [r7, #0]
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	480f      	ldr	r0, [pc, #60]	; (8002bd4 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x50>)
 8002b98:	f7ff ffd9 	bl	8002b4e <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj28EEEEDaOT_>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x54>)
 8002ba2:	f7ff ffe1 	bl	8002b68 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj28EEEEDaOT_>
 8002ba6:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 feaf 	bl	800490e <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 feb6 	bl	8004924 <_ZSt4moveIRSt8identityEONSt16remove_referenceIT_E4typeEOS3_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8002bb8:	f88d 6000 	strb.w	r6, [sp]
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	462a      	mov	r2, r5
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f001 fecc 	bl	8004960 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_>
 8002bc8:	4603      	mov	r3, r0
      }
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd4:	08006c2c 	.word	0x08006c2c
 8002bd8:	08006c30 	.word	0x08006c30

08002bdc <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>:
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>:
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8002bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	713a      	strb	r2, [r7, #4]
 8002c0a:	703b      	strb	r3, [r7, #0]
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	480f      	ldr	r0, [pc, #60]	; (8002c4c <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x50>)
 8002c10:	f7ff ff9d 	bl	8002b4e <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj28EEEEDaOT_>
 8002c14:	4604      	mov	r4, r0
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	480d      	ldr	r0, [pc, #52]	; (8002c50 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x54>)
 8002c1a:	f7ff ffa5 	bl	8002b68 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj28EEEEDaOT_>
 8002c1e:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 fe73 	bl	800490e <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fec4 	bl	80049b8 <_ZSt4moveIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8002c30:	f88d 6000 	strb.w	r6, [sp]
 8002c34:	4643      	mov	r3, r8
 8002c36:	462a      	mov	r2, r5
 8002c38:	4621      	mov	r1, r4
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f001 feda 	bl	80049f4 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>
 8002c40:	4603      	mov	r3, r0
      }
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c4c:	08006c2c 	.word	0x08006c2c
 8002c50:	08006c30 	.word	0x08006c30

08002c54 <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaSD_>:
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	7039      	strb	r1, [r7, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f96a 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002c76:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f95d 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002c84:	4603      	mov	r3, r0
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002c90:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002c96:	2102      	movs	r1, #2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f950 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002caa:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002cb0:	2103      	movs	r1, #3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f943 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002cc4:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002cca:	2104      	movs	r1, #4
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f936 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002cde:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002ce4:	2105      	movs	r1, #5
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f929 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002cec:	4603      	mov	r3, r0
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002cf8:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002cfe:	2106      	movs	r1, #6
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f91c 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002d06:	4603      	mov	r3, r0
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d12:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d18:	2107      	movs	r1, #7
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f90f 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002d20:	4603      	mov	r3, r0
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d2c:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d32:	2108      	movs	r1, #8
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f902 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d46:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d4c:	2109      	movs	r1, #9
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f8f5 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002d54:	4603      	mov	r3, r0
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d60:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d66:	210a      	movs	r1, #10
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f8e8 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d7a:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d80:	210b      	movs	r1, #11
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f8db 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d94:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002d9a:	210c      	movs	r1, #12
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f8ce 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002da2:	4603      	mov	r3, r0
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002dae:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002db4:	210d      	movs	r1, #13
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f8c1 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002dc8:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002dce:	210e      	movs	r1, #14
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f8b4 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002de2:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002de8:	210f      	movs	r1, #15
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f8a7 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002df0:	4603      	mov	r3, r0
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002dfc:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e02:	2110      	movs	r1, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f89a 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e16:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e1c:	2111      	movs	r1, #17
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f88d 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002e24:	4603      	mov	r3, r0
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e30:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e36:	2112      	movs	r1, #18
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f880 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e4a:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e50:	2113      	movs	r1, #19
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f873 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e64:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e6a:	2114      	movs	r1, #20
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f866 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002e72:	4603      	mov	r3, r0
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e7e:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e84:	2115      	movs	r1, #21
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f859 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e98:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002e9e:	2116      	movs	r1, #22
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f84c 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002eb2:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002eb8:	2117      	movs	r1, #23
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f83f 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002ecc:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002ed2:	2118      	movs	r1, #24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f832 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002eda:	4603      	mov	r3, r0
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002ee6:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002eec:	2119      	movs	r1, #25
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f825 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002f00:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002f06:	211a      	movs	r1, #26
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f818 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002f1a:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002f20:	211b      	movs	r1, #27
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f80b 	bl	8002f3e <_ZNSt5arrayIhLj28EEixEj>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8002f34:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_ZNSt5arrayIhLj28EEixEj>:
      operator[](size_type __n) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f805 	bl	8002f5c <_ZNSt14__array_traitsIhLj28EE6_S_refERA28_Khj>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_ZNSt14__array_traitsIhLj28EE6_S_refERA28_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8002f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f7c:	b0cc      	sub	sp, #304	; 0x130
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4604      	mov	r4, r0
 8002f82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8002f86:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8002f8a:	6001      	str	r1, [r0, #0]
 8002f8c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002f90:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8002f94:	600a      	str	r2, [r1, #0]
 8002f96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002f9a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fa4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8002fa8:	4622      	mov	r2, r4
 8002faa:	701a      	strb	r2, [r3, #0]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 8002fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002fb8:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fc8:	f107 0210 	add.w	r2, r7, #16
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002fda:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002fee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003002:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	611a      	str	r2, [r3, #16]
 800300a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800300e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003012:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003016:	615a      	str	r2, [r3, #20]
 8003018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800301c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003020:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003024:	619a      	str	r2, [r3, #24]
 8003026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800302a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800302e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8003032:	61da      	str	r2, [r3, #28]
 8003034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800303c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003040:	621a      	str	r2, [r3, #32]
 8003042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800304a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
 8003050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003058:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
 800305e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003066:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
 800306c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003074:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
 800307a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800307e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003082:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8003086:	635a      	str	r2, [r3, #52]	; 0x34
 8003088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800308c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003090:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
 8003096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800309a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800309e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80030a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030ac:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
 80030b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030ba:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
 80030c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030c8:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80030cc:	649a      	str	r2, [r3, #72]	; 0x48
 80030ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030d6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80030da:	64da      	str	r2, [r3, #76]	; 0x4c
 80030dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030e4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80030e8:	651a      	str	r2, [r3, #80]	; 0x50
 80030ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030f2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
 80030f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003100:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003104:	659a      	str	r2, [r3, #88]	; 0x58
 8003106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800310a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800310e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003112:	65da      	str	r2, [r3, #92]	; 0x5c
 8003114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800311c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003120:	661a      	str	r2, [r3, #96]	; 0x60
 8003122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800312a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800312e:	665a      	str	r2, [r3, #100]	; 0x64
 8003130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003138:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800313c:	669a      	str	r2, [r3, #104]	; 0x68
 800313e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003146:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800314a:	66da      	str	r2, [r3, #108]	; 0x6c
 800314c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003154:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003158:	671a      	str	r2, [r3, #112]	; 0x70
 800315a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800315e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003162:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8003166:	675a      	str	r2, [r3, #116]	; 0x74
 8003168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800316c:	4661      	mov	r1, ip
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fb5e 	bl	8002830 <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaSD_>
			std::ranges::sort(priorities);
 8003174:	f107 0110 	add.w	r1, r7, #16
 8003178:	4653      	mov	r3, sl
 800317a:	464a      	mov	r2, r9
 800317c:	486f      	ldr	r0, [pc, #444]	; (800333c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3c4>)
 800317e:	f7ff fd01 	bl	8002b84 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800318c:	2b03      	cmp	r3, #3
 800318e:	d845      	bhi.n	800321c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2a4>
				for(u32 i = 0; auto& priority : priorities)
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800319e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80031a2:	f001 fb9b 	bl	80048dc <_ZNSt5arrayIhLj28EE5beginEv>
 80031a6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 80031aa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80031ae:	f001 fba1 	bl	80048f4 <_ZNSt5arrayIhLj28EE3endEv>
 80031b2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80031b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031be:	429a      	cmp	r2, r3
 80031c0:	d026      	beq.n	8003210 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x298>
 80031c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80031c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					priority |= (i << 6);
 80031ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	019b      	lsls	r3, r3, #6
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031e2:	701a      	strb	r2, [r3, #0]
					++i;
 80031e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031e8:	3301      	adds	r3, #1
 80031ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80031ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80031f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	429a      	cmp	r2, r3
 8003200:	d005      	beq.n	800320e <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x296>
				for(u32 i = 0; auto& priority : priorities)
 8003202:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003206:	3301      	adds	r3, #1
 8003208:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800320c:	e7d3      	b.n	80031b6 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x23e>
						break;
 800320e:	bf00      	nop
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8003210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003214:	3301      	adds	r3, #1
 8003216:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800321a:	e7b5      	b.n	8003188 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x210>
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 800321c:	f107 0110 	add.w	r1, r7, #16
 8003220:	4643      	mov	r3, r8
 8003222:	4632      	mov	r2, r6
 8003224:	4845      	ldr	r0, [pc, #276]	; (800333c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3c4>)
 8003226:	f7ff fce9 	bl	8002bfc <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj28EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003236:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800324e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800325c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003264:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800326c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003274:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800327c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003284:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800328c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003294:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800329c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80032a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80032a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80032a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032ac:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80032b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80032b4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80032b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80032c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80032d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80032dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80032e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80032ec:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80032f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80032f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80032f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80032fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003300:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003304:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003308:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800330c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003310:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003314:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003318:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800331c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003320:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003324:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003328:	4629      	mov	r1, r5
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fc92 	bl	8002c54 <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13ELh14ELh15ELh16ELh17ELh18ELh19ELh20ELh21ELh22ELh23ELh24ELh25ELh26ELh27EEEEDaSD_>
		}
 8003330:	bf00      	nop
 8003332:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003336:	46bd      	mov	sp, r7
 8003338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333c:	08006c3c 	.word	0x08006c3c

08003340 <_ZN6CRSLib7set_bitImiEEvRVT_T0_>:
	inline constexpr void set_bit(volatile auto& bit, const auto reg)
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
		bit = bit | reg;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
	}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	2208      	movs	r2, #8
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fbff 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
			set_bit(bxcan->FS1R, bit_position);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f884 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f87d 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff f860 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80033c0:	e006      	b.n	80033d0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff f86a 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	7c1b      	ldrb	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f85f 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80033e6:	e006      	b.n	80033f6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f845 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003408:	2302      	movs	r3, #2
 800340a:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	2208      	movs	r2, #8
 8003414:	4618      	mov	r0, r3
 8003416:	f003 fbb1 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			set_bit(bxcan->FS1R, bit_position);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003430:	2102      	movs	r1, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f836 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f82f 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003454:	2102      	movs	r1, #2
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f812 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800345c:	e006      	b.n	800346c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f81c 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	7c1b      	ldrb	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f811 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003482:	e006      	b.n	8003492 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800348a:	2102      	movs	r1, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fff7 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80034a4:	2304      	movs	r3, #4
 80034a6:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	2208      	movs	r2, #8
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fb63 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
			set_bit(bxcan->FS1R, bit_position);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80034cc:	2104      	movs	r1, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe ffe8 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034da:	2104      	movs	r1, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe ffe1 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034f0:	2104      	movs	r1, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe ffc4 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80034f8:	e006      	b.n	8003508 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003500:	2104      	movs	r1, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe ffce 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	7c1b      	ldrb	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003516:	2104      	movs	r1, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ffc3 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 800351e:	e006      	b.n	800352e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003526:	2104      	movs	r1, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe ffa9 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003540:	2308      	movs	r3, #8
 8003542:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	2208      	movs	r2, #8
 800354c:	4618      	mov	r0, r3
 800354e:	f003 fb15 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
			set_bit(bxcan->FS1R, bit_position);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003568:	2108      	movs	r1, #8
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe ff9a 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003576:	2108      	movs	r1, #8
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe ff93 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800358c:	2108      	movs	r1, #8
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe ff76 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003594:	e006      	b.n	80035a4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800359c:	2108      	movs	r1, #8
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe ff80 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	7c1b      	ldrb	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80035b2:	2108      	movs	r1, #8
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe ff75 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80035ba:	e006      	b.n	80035ca <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80035c2:	2108      	movs	r1, #8
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe ff5b 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80035dc:	2310      	movs	r3, #16
 80035de:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	2208      	movs	r2, #8
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 fac7 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
			set_bit(bxcan->FS1R, bit_position);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003604:	2110      	movs	r1, #16
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe ff4c 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003612:	2110      	movs	r1, #16
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe ff45 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003628:	2110      	movs	r1, #16
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe ff28 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003630:	e006      	b.n	8003640 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003638:	2110      	movs	r1, #16
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe ff32 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	7c1b      	ldrb	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800364e:	2110      	movs	r1, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe ff27 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003656:	e006      	b.n	8003666 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800365e:	2110      	movs	r1, #16
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe ff0d 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003666:	bf00      	nop
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003678:	2320      	movs	r3, #32
 800367a:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	2208      	movs	r2, #8
 8003684:	4618      	mov	r0, r3
 8003686:	f003 fa79 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
			set_bit(bxcan->FS1R, bit_position);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80036a0:	2120      	movs	r1, #32
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fefe 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036ae:	2120      	movs	r1, #32
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fef7 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036c4:	2120      	movs	r1, #32
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe feda 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80036cc:	e006      	b.n	80036dc <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036d4:	2120      	movs	r1, #32
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fee4 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	7c1b      	ldrb	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80036ea:	2120      	movs	r1, #32
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fed9 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80036f2:	e006      	b.n	8003702 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80036fa:	2120      	movs	r1, #32
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe febf 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003714:	2340      	movs	r3, #64	; 0x40
 8003716:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	2208      	movs	r2, #8
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fa2b 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
			set_bit(bxcan->FS1R, bit_position);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe feb0 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fea9 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d107      	bne.n	800376a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003760:	2140      	movs	r1, #64	; 0x40
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fe8c 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003768:	e006      	b.n	8003778 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fe96 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	7c1b      	ldrb	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fe8b 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 800378e:	e006      	b.n	800379e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fe71 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	2208      	movs	r2, #8
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 f9dd 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
			set_bit(bxcan->FS1R, bit_position);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fe62 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fe5b 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d107      	bne.n	8003806 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fe3e 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003804:	e006      	b.n	8003814 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fe48 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	7c1b      	ldrb	r3, [r3, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fe3d 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 800382a:	e006      	b.n	800383a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fe23 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 800384c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003850:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003852:	6839      	ldr	r1, [r7, #0]
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	2208      	movs	r2, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f003 f98e 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
			set_bit(bxcan->FS1R, bit_position);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fe12 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fe0a 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d108      	bne.n	80038aa <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800389e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fdec 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80038a8:	e007      	b.n	80038ba <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fdf5 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	7c1b      	ldrb	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80038c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fde9 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80038d2:	e007      	b.n	80038e4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80038da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fdce 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80038f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038fa:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	f107 030c 	add.w	r3, r7, #12
 8003902:	2208      	movs	r2, #8
 8003904:	4618      	mov	r0, r3
 8003906:	f003 f939 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			set_bit(bxcan->FS1R, bit_position);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fdbd 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fdb5 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fd97 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003952:	e007      	b.n	8003964 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800395a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fda0 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	7c1b      	ldrb	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fd94 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 800397c:	e007      	b.n	800398e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fd79 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80039a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a4:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80039a6:	6839      	ldr	r1, [r7, #0]
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	2208      	movs	r2, #8
 80039ae:	4618      	mov	r0, r3
 80039b0:	f003 f8e4 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
			set_bit(bxcan->FS1R, bit_position);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80039ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fd68 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fd60 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fd42 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80039fc:	e007      	b.n	8003a0e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fd4b 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	7c1b      	ldrb	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fd3f 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003a26:	e007      	b.n	8003a38 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fd24 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003a38:	bf00      	nop
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4e:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	f107 030c 	add.w	r3, r7, #12
 8003a56:	2208      	movs	r2, #8
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 f88f 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
			set_bit(bxcan->FS1R, bit_position);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fd13 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fd0b 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fced 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003aa6:	e007      	b.n	8003ab8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fcf6 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	7c1b      	ldrb	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fcea 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003ad0:	e007      	b.n	8003ae2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fccf 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	2208      	movs	r2, #8
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 f83a 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
			set_bit(bxcan->FS1R, bit_position);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fcbe 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fcb6 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d108      	bne.n	8003b52 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fc98 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003b50:	e007      	b.n	8003b62 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fca1 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	7c1b      	ldrb	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fc95 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003b7a:	e007      	b.n	8003b8c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fc7a 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ba2:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	2208      	movs	r2, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 ffe5 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
			set_bit(bxcan->FS1R, bit_position);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fc69 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fc61 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fc43 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003bfa:	e007      	b.n	8003c0c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fc4c 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	7c1b      	ldrb	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fc40 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003c24:	e007      	b.n	8003c36 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fc25 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh14ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c4c:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	f107 030c 	add.w	r3, r7, #12
 8003c54:	2208      	movs	r2, #8
 8003c56:	4618      	mov	r0, r3
 8003c58:	f002 ff90 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
			set_bit(bxcan->FS1R, bit_position);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fc14 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fc0c 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh14ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fbee 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003ca4:	e007      	b.n	8003cb6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh14ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fbf7 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	7c1b      	ldrb	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh14ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fbeb 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003cce:	e007      	b.n	8003ce0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh14ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fbd0 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003ce0:	bf00      	nop
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh15ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf6:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	2208      	movs	r2, #8
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 ff3b 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
			set_bit(bxcan->FS1R, bit_position);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fbbf 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fbb7 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d108      	bne.n	8003d50 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh15ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fb99 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003d4e:	e007      	b.n	8003d60 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh15ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fba2 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	7c1b      	ldrb	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh15ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fb96 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003d78:	e007      	b.n	8003d8a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh15ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fb7b 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh16ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003da0:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	2208      	movs	r2, #8
 8003daa:	4618      	mov	r0, r3
 8003dac:	f002 fee6 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
			set_bit(bxcan->FS1R, bit_position);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003dc6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fb6a 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dd6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fb62 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh16ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003dee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fb44 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003df8:	e007      	b.n	8003e0a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh16ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fb4d 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	7c1b      	ldrb	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh16ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003e18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fb41 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003e22:	e007      	b.n	8003e34 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh16ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003e2a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fb26 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh17ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e4a:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	2208      	movs	r2, #8
 8003e54:	4618      	mov	r0, r3
 8003e56:	f002 fe91 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
			set_bit(bxcan->FS1R, bit_position);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003e70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe fb15 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e80:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fb0d 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh17ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e98:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe faef 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003ea2:	e007      	b.n	8003eb4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh17ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eaa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe faf8 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	7c1b      	ldrb	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh17ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003ec2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe faec 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003ecc:	e007      	b.n	8003ede <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh17ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003ed4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fad1 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh18ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003ef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ef4:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	2208      	movs	r2, #8
 8003efe:	4618      	mov	r0, r3
 8003f00:	f002 fe3c 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
			set_bit(bxcan->FS1R, bit_position);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003f1a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fac0 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f2a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fab8 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh18ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f42:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fa9a 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003f4c:	e007      	b.n	8003f5e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh18ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f54:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe faa3 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	7c1b      	ldrb	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh18ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003f6c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fa97 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8003f76:	e007      	b.n	8003f88 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh18ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003f7e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fa7c 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh19ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8003f9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f9e:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	f107 030c 	add.w	r3, r7, #12
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f002 fde7 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
			set_bit(bxcan->FS1R, bit_position);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003fc4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fa6b 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fa63 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh19ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fa45 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8003ff6:	e007      	b.n	8004008 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh19ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ffe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fa4e 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	7c1b      	ldrb	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh19ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004016:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fa42 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8004020:	e007      	b.n	8004032 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh19ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004028:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fa27 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8004032:	bf00      	nop
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh20ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8004044:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004048:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	2208      	movs	r2, #8
 8004052:	4618      	mov	r0, r3
 8004054:	f002 fd92 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
			set_bit(bxcan->FS1R, bit_position);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800406e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fa16 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800407e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fa0e 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh20ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004096:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f9f0 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80040a0:	e007      	b.n	80040b2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh20ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040a8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe f9f9 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7c1b      	ldrb	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh20ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80040c0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe f9ed 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80040ca:	e007      	b.n	80040dc <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh20ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80040d2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe f9d2 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh21ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80040ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040f2:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	2208      	movs	r2, #8
 80040fc:	4618      	mov	r0, r3
 80040fe:	f002 fd3d 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			set_bit(bxcan->FS1R, bit_position);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004118:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe f9c1 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004128:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe f9b9 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh21ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004140:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f99b 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800414a:	e007      	b.n	800415c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh21ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f9a4 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	7c1b      	ldrb	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh21ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800416a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe f998 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8004174:	e007      	b.n	8004186 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh21ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800417c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe f97d 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh22ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8004198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800419c:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	2208      	movs	r2, #8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 fce8 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
			set_bit(bxcan->FS1R, bit_position);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80041c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe f96c 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f964 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh22ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe f946 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80041f4:	e007      	b.n	8004206 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh22ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe f94f 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7c1b      	ldrb	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh22ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004214:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe f943 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 800421e:	e007      	b.n	8004230 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh22ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004226:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe f928 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8004230:	bf00      	nop
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh23ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8004242:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004246:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	2208      	movs	r2, #8
 8004250:	4618      	mov	r0, r3
 8004252:	f002 fc93 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
			set_bit(bxcan->FS1R, bit_position);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800426c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe f917 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800427c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe f90f 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d108      	bne.n	80042a0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh23ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004294:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe f8f1 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800429e:	e007      	b.n	80042b0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh23ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042a6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f8fa 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	7c1b      	ldrb	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh23ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80042be:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe f8ee 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80042c8:	e007      	b.n	80042da <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh23ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80042d0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe f8d3 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh24ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80042ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042f0:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	f107 030c 	add.w	r3, r7, #12
 80042f8:	2208      	movs	r2, #8
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 fc3e 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			set_bit(bxcan->FS1R, bit_position);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004316:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f8c2 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004326:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe f8ba 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d108      	bne.n	800434a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh24ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800433e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe f89c 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8004348:	e007      	b.n	800435a <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh24ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004350:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe f8a5 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7c1b      	ldrb	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh24ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004368:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe f899 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8004372:	e007      	b.n	8004384 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh24ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800437a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe f87e 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8004384:	bf00      	nop
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh25ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8004396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439a:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	f107 030c 	add.w	r3, r7, #12
 80043a2:	2208      	movs	r2, #8
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 fbe9 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
			set_bit(bxcan->FS1R, bit_position);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80043c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe f86d 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fe f865 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d108      	bne.n	80043f4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh25ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe f847 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80043f2:	e007      	b.n	8004404 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh25ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe f850 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	7c1b      	ldrb	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh25ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004412:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe f844 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 800441c:	e007      	b.n	800442e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh25ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004424:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe f829 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh26ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8004440:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004444:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8004446:	6839      	ldr	r1, [r7, #0]
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	2208      	movs	r2, #8
 800444e:	4618      	mov	r0, r3
 8004450:	f002 fb94 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
			set_bit(bxcan->FS1R, bit_position);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800446a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe f818 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800447a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe f810 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh26ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004492:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fff2 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800449c:	e007      	b.n	80044ae <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh26ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80044a4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fd fffb 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	7c1b      	ldrb	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh26ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80044bc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd ffef 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80044c6:	e007      	b.n	80044d8 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh26ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80044ce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd ffd4 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80044d8:	bf00      	nop
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh27ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80044ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ee:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	2208      	movs	r2, #8
 80044f8:	4618      	mov	r0, r3
 80044fa:	f002 fb3f 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
			set_bit(bxcan->FS1R, bit_position);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004514:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004518:	4618      	mov	r0, r3
 800451a:	f7fd ffc3 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004524:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd ffbb 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d108      	bne.n	8004548 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh27ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800453c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004540:	4618      	mov	r0, r3
 8004542:	f7fd ff9d 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8004546:	e007      	b.n	8004558 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh27ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800454e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd ffa6 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	7c1b      	ldrb	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh27ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004566:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd ff9a 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 8004570:	e007      	b.n	8004582 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh27ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004578:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800457c:	4618      	mov	r0, r3
 800457e:	f7fd ff7f 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 8004582:	bf00      	nop
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0EEEEDaSD_>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800458a:	b590      	push	{r4, r7, lr}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	7039      	strb	r1, [r7, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685c      	ldr	r4, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	7819      	ldrb	r1, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 80045a0:	461a      	mov	r2, r3
 80045a2:	2000      	movs	r0, #0
 80045a4:	f000 f806 	bl	80045b4 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 80045a8:	4603      	mov	r3, r0
 80045aa:	7023      	strb	r3, [r4, #0]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd90      	pop	{r4, r7, pc}

080045b4 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	603a      	str	r2, [r7, #0]
 80045be:	71fb      	strb	r3, [r7, #7]
 80045c0:	460b      	mov	r3, r1
 80045c2:	71bb      	strb	r3, [r7, #6]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 80045c4:	79ba      	ldrb	r2, [r7, #6]
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d801      	bhi.n	80045d0 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c>
 80045cc:	2220      	movs	r2, #32
 80045ce:	e000      	b.n	80045d2 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1e>
 80045d0:	2200      	movs	r2, #0
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2a>
 80045da:	2310      	movs	r3, #16
 80045dc:	e000      	b.n	80045e0 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2c>
 80045de:	2300      	movs	r3, #0
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b25b      	sxtb	r3, r3
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	b2db      	uxtb	r3, r3
		}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj1EEEEDaOT_>:
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
	    return __t.begin();
 8004608:	6838      	ldr	r0, [r7, #0]
 800460a:	f000 fa1f 	bl	8004a4c <_ZNSt5arrayIhLj1EE5beginEv>
 800460e:	4603      	mov	r3, r0
	}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj1EEEEDaOT_>:
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	    return __t.end();
 8004622:	6838      	ldr	r0, [r7, #0]
 8004624:	f000 fa1e 	bl	8004a64 <_ZNSt5arrayIhLj1EE3endEv>
 8004628:	4603      	mov	r3, r0
	}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>:
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8004634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af02      	add	r7, sp, #8
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	713a      	strb	r2, [r7, #4]
 8004642:	703b      	strb	r3, [r7, #0]
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	480f      	ldr	r0, [pc, #60]	; (8004684 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x50>)
 8004648:	f7ff ffd9 	bl	80045fe <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj1EEEEDaOT_>
 800464c:	4604      	mov	r4, r0
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x54>)
 8004652:	f7ff ffe1 	bl	8004618 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj1EEEEDaOT_>
 8004656:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f957 	bl	800490e <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8004660:	463b      	mov	r3, r7
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f95e 	bl	8004924 <_ZSt4moveIRSt8identityEONSt16remove_referenceIT_E4typeEOS3_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8004668:	f88d 6000 	strb.w	r6, [sp]
 800466c:	4643      	mov	r3, r8
 800466e:	462a      	mov	r2, r5
 8004670:	4621      	mov	r1, r4
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f974 	bl	8004960 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_>
 8004678:	4603      	mov	r3, r0
      }
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004684:	08006c2c 	.word	0x08006c2c
 8004688:	08006c30 	.word	0x08006c30

0800468c <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>:
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>:
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 80046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af02      	add	r7, sp, #8
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	713a      	strb	r2, [r7, #4]
 80046ba:	703b      	strb	r3, [r7, #0]
	return (*this)(ranges::begin(__r), ranges::end(__r),
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	480f      	ldr	r0, [pc, #60]	; (80046fc <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x50>)
 80046c0:	f7ff ff9d 	bl	80045fe <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj1EEEEDaOT_>
 80046c4:	4604      	mov	r4, r0
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	480d      	ldr	r0, [pc, #52]	; (8004700 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x54>)
 80046ca:	f7ff ffa5 	bl	8004618 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj1EEEEDaOT_>
 80046ce:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f91b 	bl	800490e <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 80046d8:	463b      	mov	r3, r7
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f9cf 	bl	8004a7e <_ZSt4moveIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 80046e0:	f88d 6000 	strb.w	r6, [sp]
 80046e4:	4643      	mov	r3, r8
 80046e6:	462a      	mov	r2, r5
 80046e8:	4621      	mov	r1, r4
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f9e4 	bl	8004ab8 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>
 80046f0:	4603      	mov	r3, r0
      }
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fc:	08006c2c 	.word	0x08006c2c
 8004700:	08006c30 	.word	0x08006c30

08004704 <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0EEEEDaSD_>:
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	7039      	strb	r1, [r7, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f000 f80b 	bl	8004730 <_ZNSt5arrayIhLj1EEixEj>
 800471a:	4603      	mov	r3, r0
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8004726:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZNSt5arrayIhLj1EEixEj>:
      operator[](size_type __n) noexcept
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f805 	bl	800474e <_ZNSt14__array_traitsIhLj1EE6_S_refERA1_Khj>
 8004744:	4603      	mov	r3, r0
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_ZNSt14__array_traitsIhLj1EE6_S_refERA1_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	4413      	add	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800476c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004770:	b08f      	sub	sp, #60	; 0x3c
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	6039      	str	r1, [r7, #0]
 8004778:	71fb      	strb	r3, [r7, #7]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	733b      	strb	r3, [r7, #12]
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fefb 	bl	800458a <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0EEEEDaSD_>
			std::ranges::sort(priorities);
 8004794:	f107 0108 	add.w	r1, r7, #8
 8004798:	464b      	mov	r3, r9
 800479a:	4642      	mov	r2, r8
 800479c:	4827      	ldr	r0, [pc, #156]	; (800483c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>)
 800479e:	f7ff ff49 	bl	8004634 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d830      	bhi.n	800480e <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xa2>
				for(u32 i = 0; auto& priority : priorities)
 80047ac:	2300      	movs	r3, #0
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
 80047b0:	f107 0308 	add.w	r3, r7, #8
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b8:	f000 f948 	bl	8004a4c <_ZNSt5arrayIhLj1EE5beginEv>
 80047bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80047be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c0:	f000 f950 	bl	8004a64 <_ZNSt5arrayIhLj1EE3endEv>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24
 80047c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d01b      	beq.n	8004806 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x9a>
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	623b      	str	r3, [r7, #32]
					priority |= (i << 6);
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	019b      	lsls	r3, r3, #6
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	701a      	strb	r2, [r3, #0]
					++i;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	3301      	adds	r3, #1
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d003      	beq.n	8004804 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x98>
				for(u32 i = 0; auto& priority : priorities)
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	3301      	adds	r3, #1
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	e7e0      	b.n	80047c6 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5a>
						break;
 8004804:	bf00      	nop
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	3301      	adds	r3, #1
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
 800480c:	e7cb      	b.n	80047a6 <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a>
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 800480e:	f107 0108 	add.w	r1, r7, #8
 8004812:	4633      	mov	r3, r6
 8004814:	462a      	mov	r2, r5
 8004816:	4809      	ldr	r0, [pc, #36]	; (800483c <_ZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>)
 8004818:	f7ff ff48 	bl	80046ac <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	f107 0318 	add.w	r3, r7, #24
 800482a:	4621      	mov	r1, r4
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff69 	bl	8004704 <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0EEEEDaSD_>
		}
 8004832:	bf00      	nop
 8004834:	373c      	adds	r7, #60	; 0x3c
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800483c:	08006c3c 	.word	0x08006c3c

08004840 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 800484a:	2301      	movs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	2208      	movs	r2, #8
 8004856:	4618      	mov	r0, r3
 8004858:	f002 f990 	bl	8006b7c <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
			set_bit(bxcan->FS1R, bit_position);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd fe15 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			clear_bit(bxcan->FM1R, bit_position);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fdfc 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d107      	bne.n	80048a0 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd fdf1 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800489e:	e006      	b.n	80048ae <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fdfb 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	7c1b      	ldrb	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80048bc:	2101      	movs	r1, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fdf0 	bl	80024a4 <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	};
 80048c4:	e006      	b.n	80048d4 <_ZN6CRSLib3Can6RM039013FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80048cc:	2101      	movs	r1, #1
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd fdd6 	bl	8002480 <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	};
 80048d4:	bf00      	nop
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <_ZNSt5arrayIhLj28EE5beginEv>:
      begin() noexcept
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f913 	bl	8004b10 <_ZNSt5arrayIhLj28EE4dataEv>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZNSt5arrayIhLj28EE3endEv>:
      end() noexcept
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f907 	bl	8004b10 <_ZNSt5arrayIhLj28EE4dataEv>
 8004902:	4603      	mov	r3, r0
 8004904:	331c      	adds	r3, #28
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <_ZSt4moveIRSt8identityEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <_ZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_>:
      __make_comp_proj(_Comp& __comp, _Proj& __proj)
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
	};
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	605a      	str	r2, [r3, #4]
      }
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_>:
      operator()(_Iter __first, _Sent __last,
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	703b      	strb	r3, [r7, #0]
	auto __lasti = ranges::next(__first, __last);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	480f      	ldr	r0, [pc, #60]	; (80049b4 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_+0x54>)
 8004976:	f000 f8d9 	bl	8004b2c <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>
 800497a:	61f8      	str	r0, [r7, #28]
	std::sort(std::move(__first), __lasti,
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f8e7 	bl	8004b54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004986:	4603      	mov	r3, r0
 8004988:	681c      	ldr	r4, [r3, #0]
 800498a:	f107 0314 	add.w	r3, r7, #20
 800498e:	4639      	mov	r1, r7
 8004990:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ffd0 	bl	800493a <_ZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_>
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	cb0c      	ldmia	r3, {r2, r3}
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 f8e1 	bl	8004b6a <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessESt8identityEEDaRT_RT0_EUlOS6_OS8_E_EvS6_S6_S8_>
	return __lasti;
 80049a8:	69fb      	ldr	r3, [r7, #28]
      }
 80049aa:	4618      	mov	r0, r3
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd90      	pop	{r4, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	08006c38 	.word	0x08006c38

080049b8 <_ZSt4moveIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>:
      __make_comp_proj(_Comp& __comp, _Proj& __proj)
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
	};
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	605a      	str	r2, [r3, #4]
      }
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>:
      operator()(_Iter __first, _Sent __last,
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	703b      	strb	r3, [r7, #0]
	auto __lasti = ranges::next(__first, __last);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4619      	mov	r1, r3
 8004a08:	480f      	ldr	r0, [pc, #60]	; (8004a48 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_+0x54>)
 8004a0a:	f000 f88f 	bl	8004b2c <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>
 8004a0e:	61f8      	str	r0, [r7, #28]
	std::sort(std::move(__first), __lasti,
 8004a10:	f107 0308 	add.w	r3, r7, #8
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f89d 	bl	8004b54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	681c      	ldr	r4, [r3, #0]
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4639      	mov	r1, r7
 8004a24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff ffd0 	bl	80049ce <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	cb0c      	ldmia	r3, {r2, r3}
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 f8b1 	bl	8004b9e <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0EEJLNS6_10FilterModeE1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>
	return __lasti;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
      }
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3724      	adds	r7, #36	; 0x24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd90      	pop	{r4, r7, pc}
 8004a46:	bf00      	nop
 8004a48:	08006c38 	.word	0x08006c38

08004a4c <_ZNSt5arrayIhLj1EE5beginEv>:
      begin() noexcept
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f8bc 	bl	8004bd2 <_ZNSt5arrayIhLj1EE4dataEv>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZNSt5arrayIhLj1EE3endEv>:
      end() noexcept
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8b0 	bl	8004bd2 <_ZNSt5arrayIhLj1EE4dataEv>
 8004a72:	4603      	mov	r3, r0
 8004a74:	3301      	adds	r3, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZSt4moveIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>:
      __make_comp_proj(_Comp& __comp, _Proj& __proj)
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	};
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	605a      	str	r2, [r3, #4]
      }
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>:
      operator()(_Iter __first, _Sent __last,
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	703b      	strb	r3, [r7, #0]
	auto __lasti = ranges::next(__first, __last);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	480f      	ldr	r0, [pc, #60]	; (8004b0c <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_+0x54>)
 8004ace:	f000 f82d 	bl	8004b2c <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>
 8004ad2:	61f8      	str	r0, [r7, #28]
	std::sort(std::move(__first), __lasti,
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f83b 	bl	8004b54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	681c      	ldr	r4, [r3, #0]
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ffd1 	bl	8004a94 <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	cb0c      	ldmia	r3, {r2, r3}
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 f876 	bl	8004bec <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0EEJLNS6_10FilterModeE0EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>
	return __lasti;
 8004b00:	69fb      	ldr	r3, [r7, #28]
      }
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08006c38 	.word	0x08006c38

08004b10 <_ZNSt5arrayIhLj28EE4dataEv>:
      data() noexcept
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f880 	bl	8004c20 <_ZNSt14__array_traitsIhLj28EE6_S_ptrERA28_Kh>
 8004b20:	4603      	mov	r3, r0
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>:
	return __x;
      }

    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>
      constexpr _It
      operator()(_It __x, _Sent __bound) const
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
      {
	ranges::advance(__x, __bound);
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4803      	ldr	r0, [pc, #12]	; (8004b50 <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_+0x24>)
 8004b42:	f000 f878 	bl	8004c36 <_ZNKSt6ranges12__advance_fnclIPhS2_EEvRT_T0_>
	return __x;
 8004b46:	68bb      	ldr	r3, [r7, #8]
      }
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08006c34 	.word	0x08006c34

08004b54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessESt8identityEEDaRT_RT0_EUlOS6_OS8_E_EvS6_S6_S8_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	4639      	mov	r1, r7
 8004b76:	e881 000c 	stmia.w	r1, {r2, r3}
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8004b7a:	f107 0010 	add.w	r0, r7, #16
 8004b7e:	463b      	mov	r3, r7
 8004b80:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004b84:	f000 f869 	bl	8004c5a <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_15_Iter_comp_iterIS7_EES7_>
 8004b88:	f107 0310 	add.w	r3, r7, #16
 8004b8c:	cb0c      	ldmia	r3, {r2, r3}
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f877 	bl	8004c84 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0EEJLNS6_10FilterModeE1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	4639      	mov	r1, r7
 8004baa:	e881 000c 	stmia.w	r1, {r2, r3}
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8004bae:	f107 0010 	add.w	r0, r7, #16
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004bb8:	f000 f889 	bl	8004cce <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>
 8004bbc:	f107 0310 	add.w	r3, r7, #16
 8004bc0:	cb0c      	ldmia	r3, {r2, r3}
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f897 	bl	8004cf8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_ZNSt5arrayIhLj1EE4dataEv>:
      data() noexcept
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f8b0 	bl	8004d42 <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0EEJLNS6_10FilterModeE0EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	e881 000c 	stmia.w	r1, {r2, r3}
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8004bfc:	f107 0010 	add.w	r0, r7, #16
 8004c00:	463b      	mov	r3, r7
 8004c02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c06:	f000 f8a7 	bl	8004d58 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>
 8004c0a:	f107 0310 	add.w	r3, r7, #16
 8004c0e:	cb0c      	ldmia	r3, {r2, r3}
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f8b5 	bl	8004d82 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZNSt14__array_traitsIhLj28EE6_S_ptrERA28_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <_ZNKSt6ranges12__advance_fnclIPhS2_EEvRT_T0_>:
      operator()(_It& __it, _Sent __bound) const
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
	  __it = std::move(__bound);
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff85 	bl	8004b54 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	601a      	str	r2, [r3, #0]
      }
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_15_Iter_comp_iterIS7_EES7_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8004c68:	1d3b      	adds	r3, r7, #4
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f8ae 	bl	8004dcc <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 8004c70:	4603      	mov	r3, r0
 8004c72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f8b3 	bl	8004de2 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1ESD_>
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4639      	mov	r1, r7
 8004c90:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first != __last)
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d014      	beq.n	8004cc6 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
				std::__lg(__last - __first) * 2,
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd f9da 	bl	800205c <_ZSt4__lgi>
 8004ca8:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8004caa:	005a      	lsls	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f8aa 	bl	8004e0e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8004cba:	463b      	mov	r3, r7
 8004cbc:	cb0c      	ldmia	r3, {r2, r3}
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8d9 	bl	8004e78 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>:
    __iter_comp_iter(_Compare __comp)
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	1d3b      	adds	r3, r7, #4
 8004cd8:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f8f2 	bl	8004ec8 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f8f7 	bl	8004ede <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4639      	mov	r1, r7
 8004d04:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first != __last)
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d014      	beq.n	8004d3a <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x42>
				std::__lg(__last - __first) * 2,
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd f9a0 	bl	800205c <_ZSt4__lgi>
 8004d1c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8004d1e:	005a      	lsls	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f8ee 	bl	8004f0a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8004d2e:	463b      	mov	r3, r7
 8004d30:	cb0c      	ldmia	r3, {r2, r3}
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f91d 	bl	8004f74 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>:
    __iter_comp_iter(_Compare __comp)
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 f92b 	bl	8004fc4 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f930 	bl	8004fda <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first != __last)
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d014      	beq.n	8004dc4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x42>
				std::__lg(__last - __first) * 2,
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fd f95b 	bl	800205c <_ZSt4__lgi>
 8004da6:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8004da8:	005a      	lsls	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f927 	bl	8005006 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8004db8:	463b      	mov	r3, r7
 8004dba:	cb0c      	ldmia	r3, {r2, r3}
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f956 	bl	8005070 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>:
    move(_Tp&& __t) noexcept
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1ESD_>:
      _Iter_comp_iter(_Compare __comp)
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	1d3b      	adds	r3, r7, #4
 8004dec:	e883 0006 	stmia.w	r3, {r1, r2}
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ffea 	bl	8004dcc <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e00:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8004e0e:	b082      	sub	sp, #8
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
      while (__last - __first > int(_S_threshold))
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	dd21      	ble.n	8004e6c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x5e>
	  if (__depth_limit == 0)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d108      	bne.n	8004e40 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x32>
	      std::__partial_sort(__first, __last, __last, __comp);
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f941 	bl	80050c0 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>
	      return;
 8004e3e:	e015      	b.n	8004e6c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x5e>
	  --__depth_limit;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8004e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4a:	cb0c      	ldmia	r3, {r2, r3}
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f954 	bl	80050fc <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_SB_>
 8004e54:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f7ff ffd4 	bl	8004e0e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
	  __last = __cut;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8004e6a:	e7d8      	b.n	8004e1e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x10>
    }
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e74:	b002      	add	sp, #8
 8004e76:	4770      	bx	lr

08004e78 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4639      	mov	r1, r7
 8004e84:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__last - __first > int(_S_threshold))
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	dd10      	ble.n	8004eb4 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x3c>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f103 0110 	add.w	r1, r3, #16
 8004e98:	463b      	mov	r3, r7
 8004e9a:	cb0c      	ldmia	r3, {r2, r3}
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f986 	bl	80051ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f103 0010 	add.w	r0, r3, #16
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	cb0c      	ldmia	r3, {r2, r3}
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	f000 f9c7 	bl	8005240 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 8004eb2:	e005      	b.n	8004ec0 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x48>
	std::__insertion_sort(__first, __last, __comp);
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	cb0c      	ldmia	r3, {r2, r3}
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f977 	bl	80051ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>:
    move(_Tp&& __t) noexcept
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>:
      _Iter_comp_iter(_Compare __comp)
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	e883 0006 	stmia.w	r3, {r1, r2}
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ffea 	bl	8004ec8 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004efc:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
      while (__last - __first > int(_S_threshold))
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	dd21      	ble.n	8004f68 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  if (__depth_limit == 0)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x32>
	      std::__partial_sort(__first, __last, __last, __comp);
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f9a7 	bl	8005288 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
	      return;
 8004f3a:	e015      	b.n	8004f68 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  --__depth_limit;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8004f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f46:	cb0c      	ldmia	r3, {r2, r3}
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f9ba 	bl	80052c4 <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>
 8004f50:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	6978      	ldr	r0, [r7, #20]
 8004f5e:	f7ff ffd4 	bl	8004f0a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  __last = __cut;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8004f66:	e7d8      	b.n	8004f1a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x10>
    }
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f70:	b002      	add	sp, #8
 8004f72:	4770      	bx	lr

08004f74 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4639      	mov	r1, r7
 8004f80:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__last - __first > int(_S_threshold))
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	dd10      	ble.n	8004fb0 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x3c>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f103 0110 	add.w	r1, r3, #16
 8004f94:	463b      	mov	r3, r7
 8004f96:	cb0c      	ldmia	r3, {r2, r3}
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f9d4 	bl	8005346 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f103 0010 	add.w	r0, r3, #16
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	cb0c      	ldmia	r3, {r2, r3}
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	f000 fa15 	bl	80053d8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8004fae:	e005      	b.n	8004fbc <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x48>
	std::__insertion_sort(__first, __last, __comp);
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	cb0c      	ldmia	r3, {r2, r3}
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f9c5 	bl	8005346 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>:
    move(_Tp&& __t) noexcept
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>:
      _Iter_comp_iter(_Compare __comp)
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	e883 0006 	stmia.w	r3, {r1, r2}
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ffea 	bl	8004fc4 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ff8:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8005006:	b082      	sub	sp, #8
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
      while (__last - __first > int(_S_threshold))
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b10      	cmp	r3, #16
 800501e:	dd21      	ble.n	8005064 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  if (__depth_limit == 0)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x32>
	      std::__partial_sort(__first, __last, __last, __comp);
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f9f5 	bl	8005420 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
	      return;
 8005036:	e015      	b.n	8005064 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  --__depth_limit;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800503e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005042:	cb0c      	ldmia	r3, {r2, r3}
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fa08 	bl	800545c <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>
 800504c:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	f7ff ffd4 	bl	8005006 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  __last = __cut;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8005062:	e7d8      	b.n	8005016 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x10>
    }
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800506c:	b002      	add	sp, #8
 800506e:	4770      	bx	lr

08005070 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4639      	mov	r1, r7
 800507c:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__last - __first > int(_S_threshold))
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b10      	cmp	r3, #16
 8005088:	dd10      	ble.n	80050ac <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x3c>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f103 0110 	add.w	r1, r3, #16
 8005090:	463b      	mov	r3, r7
 8005092:	cb0c      	ldmia	r3, {r2, r3}
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fa22 	bl	80054de <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f103 0010 	add.w	r0, r3, #16
 80050a0:	463b      	mov	r3, r7
 80050a2:	cb0c      	ldmia	r3, {r2, r3}
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	f000 fa63 	bl	8005570 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 80050aa:	e005      	b.n	80050b8 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x48>
	std::__insertion_sort(__first, __last, __comp);
 80050ac:	463b      	mov	r3, r7
 80050ae:	cb0c      	ldmia	r3, {r2, r3}
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fa13 	bl	80054de <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>:
    __partial_sort(_RandomAccessIterator __first,
 80050c0:	b082      	sub	sp, #8
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af02      	add	r7, sp, #8
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	61fb      	str	r3, [r7, #28]
      std::__heap_select(__first, __middle, __last, __comp);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fa6c 	bl	80055b8 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>
      std::__sort_heap(__first, __middle, __comp);
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	461a      	mov	r2, r3
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fa96 	bl	800561a <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>
    }
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050f8:	b002      	add	sp, #8
 80050fa:	4770      	bx	lr

080050fc <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_SB_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 80050fc:	b5b0      	push	{r4, r5, r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4639      	mov	r1, r7
 8005108:	e881 000c 	stmia.w	r1, {r2, r3}
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	0fda      	lsrs	r2, r3, #31
 8005114:	4413      	add	r3, r2
 8005116:	105b      	asrs	r3, r3, #1
 8005118:	461a      	mov	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1c5c      	adds	r4, r3, #1
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1e5a      	subs	r2, r3, #1
 8005128:	466d      	mov	r5, sp
 800512a:	463b      	mov	r3, r7
 800512c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005130:	e885 0003 	stmia.w	r5, {r0, r1}
 8005134:	4613      	mov	r3, r2
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4621      	mov	r1, r4
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fa86 	bl	800564c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1c58      	adds	r0, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	f000 fad2 	bl	80056f6 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_>
 8005152:	4603      	mov	r3, r0
    }
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bdb0      	pop	{r4, r5, r7, pc}

0800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fafd 	bl	800576e <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>
 8005174:	4603      	mov	r3, r0
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800517e:	b590      	push	{r4, r7, lr}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fb22 	bl	80057d4 <_ZSt12__miter_baseIPhET_S1_>
 8005190:	4604      	mov	r4, r0
 8005192:	68b8      	ldr	r0, [r7, #8]
 8005194:	f000 fb1e 	bl	80057d4 <_ZSt12__miter_baseIPhET_S1_>
 8005198:	4603      	mov	r3, r0
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4619      	mov	r1, r3
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 fb23 	bl	80057ea <_ZSt22__copy_move_backward_aILb1EPhS0_ET1_T0_S2_S1_>
 80051a4:	4603      	mov	r3, r0
    }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}

080051ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __insertion_sort(_RandomAccessIterator __first,
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	4639      	mov	r1, r7
 80051ba:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first == __last) return;
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d038      	beq.n	8005238 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x8a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d032      	beq.n	800523a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x8c>
	  if (__comp(__i, __first))
 80051d4:	463b      	mov	r3, r7
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ffbe 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x66>
		__val = _GLIBCXX_MOVE(*__i);
 80051e6:	69f8      	ldr	r0, [r7, #28]
 80051e8:	f000 fae9 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80051ec:	4603      	mov	r3, r0
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	74fb      	strb	r3, [r7, #19]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	461a      	mov	r2, r3
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff ffbf 	bl	800517e <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005200:	f107 0313 	add.w	r3, r7, #19
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fada 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800520a:	4603      	mov	r3, r0
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e00d      	b.n	8005230 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x82>
	    std::__unguarded_linear_insert(__i,
 8005214:	f107 0014 	add.w	r0, r7, #20
 8005218:	463b      	mov	r3, r7
 800521a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800521e:	f000 fb07 	bl	8005830 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_14_Val_comp_iterIS7_EENS0_15_Iter_comp_iterIS7_EE>
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	e893 0006 	ldmia.w	r3, {r1, r2}
 800522a:	69f8      	ldr	r0, [r7, #28]
 800522c:	f000 fb25 	bl	800587a <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3301      	adds	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	e7c9      	b.n	80051cc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x1e>
      if (__first == __last) return;
 8005238:	bf00      	nop
    }
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4639      	mov	r1, r7
 800524c:	e881 000c 	stmia.w	r1, {r2, r3}
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d011      	beq.n	8005280 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x40>
	std::__unguarded_linear_insert(__i,
 800525c:	f107 0014 	add.w	r0, r7, #20
 8005260:	463b      	mov	r3, r7
 8005262:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005266:	f000 fae3 	bl	8005830 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_14_Val_comp_iterIS7_EENS0_15_Iter_comp_iterIS7_EE>
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005272:	69f8      	ldr	r0, [r7, #28]
 8005274:	f000 fb01 	bl	800587a <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e7e9      	b.n	8005254 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x14>
    }
 8005280:	bf00      	nop
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __partial_sort(_RandomAccessIterator __first,
 8005288:	b082      	sub	sp, #8
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af02      	add	r7, sp, #8
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	61fb      	str	r3, [r7, #28]
      std::__heap_select(__first, __middle, __last, __comp);
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fb1f 	bl	80058e6 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
      std::__sort_heap(__first, __middle, __comp);
 80052a8:	f107 031c 	add.w	r3, r7, #28
 80052ac:	461a      	mov	r2, r3
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb49 	bl	8005948 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
    }
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c0:	b002      	add	sp, #8
 80052c2:	4770      	bx	lr

080052c4 <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4639      	mov	r1, r7
 80052d0:	e881 000c 	stmia.w	r1, {r2, r3}
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	0fda      	lsrs	r2, r3, #31
 80052dc:	4413      	add	r3, r2
 80052de:	105b      	asrs	r3, r3, #1
 80052e0:	461a      	mov	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1c5c      	adds	r4, r3, #1
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	1e5a      	subs	r2, r3, #1
 80052f0:	466d      	mov	r5, sp
 80052f2:	463b      	mov	r3, r7
 80052f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80052fc:	4613      	mov	r3, r2
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4621      	mov	r1, r4
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fb39 	bl	800597a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1c58      	adds	r0, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	f000 fb85 	bl	8005a24 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>
 800531a:	4603      	mov	r3, r0
    }
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bdb0      	pop	{r4, r5, r7, pc}

08005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fbb0 	bl	8005a9c <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 800533c:	4603      	mov	r3, r0
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	4639      	mov	r1, r7
 8005352:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first == __last) return;
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d038      	beq.n	80053d0 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d032      	beq.n	80053d2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8c>
	  if (__comp(__i, __first))
 800536c:	463b      	mov	r3, r7
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	69f9      	ldr	r1, [r7, #28]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ffd6 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x66>
		__val = _GLIBCXX_MOVE(*__i);
 800537e:	69f8      	ldr	r0, [r7, #28]
 8005380:	f000 fa1d 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005384:	4603      	mov	r3, r0
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	74fb      	strb	r3, [r7, #19]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3301      	adds	r3, #1
 800538e:	461a      	mov	r2, r3
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fef3 	bl	800517e <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005398:	f107 0313 	add.w	r3, r7, #19
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fa0e 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80053a2:	4603      	mov	r3, r0
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e00d      	b.n	80053c8 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x82>
	    std::__unguarded_linear_insert(__i,
 80053ac:	f107 0014 	add.w	r0, r7, #20
 80053b0:	463b      	mov	r3, r7
 80053b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80053b6:	f000 fb9e 	bl	8005af6 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 80053ba:	f107 0314 	add.w	r3, r7, #20
 80053be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80053c2:	69f8      	ldr	r0, [r7, #28]
 80053c4:	f000 fbbc 	bl	8005b40 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e7c9      	b.n	8005364 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x1e>
      if (__first == __last) return;
 80053d0:	bf00      	nop
    }
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4639      	mov	r1, r7
 80053e4:	e881 000c 	stmia.w	r1, {r2, r3}
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d011      	beq.n	8005418 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x40>
	std::__unguarded_linear_insert(__i,
 80053f4:	f107 0014 	add.w	r0, r7, #20
 80053f8:	463b      	mov	r3, r7
 80053fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80053fe:	f000 fb7a 	bl	8005af6 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 8005402:	f107 0314 	add.w	r3, r7, #20
 8005406:	e893 0006 	ldmia.w	r3, {r1, r2}
 800540a:	69f8      	ldr	r0, [r7, #28]
 800540c:	f000 fb98 	bl	8005b40 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3301      	adds	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e7e9      	b.n	80053ec <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x14>
    }
 8005418:	bf00      	nop
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __partial_sort(_RandomAccessIterator __first,
 8005420:	b082      	sub	sp, #8
 8005422:	b580      	push	{r7, lr}
 8005424:	b086      	sub	sp, #24
 8005426:	af02      	add	r7, sp, #8
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	61fb      	str	r3, [r7, #28]
      std::__heap_select(__first, __middle, __last, __comp);
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fbb6 	bl	8005bac <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
      std::__sort_heap(__first, __middle, __comp);
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	461a      	mov	r2, r3
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fbe0 	bl	8005c0e <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
    }
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005458:	b002      	add	sp, #8
 800545a:	4770      	bx	lr

0800545c <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800545c:	b5b0      	push	{r4, r5, r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4639      	mov	r1, r7
 8005468:	e881 000c 	stmia.w	r1, {r2, r3}
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	0fda      	lsrs	r2, r3, #31
 8005474:	4413      	add	r3, r2
 8005476:	105b      	asrs	r3, r3, #1
 8005478:	461a      	mov	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1c5c      	adds	r4, r3, #1
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	466d      	mov	r5, sp
 800548a:	463b      	mov	r3, r7
 800548c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005490:	e885 0003 	stmia.w	r5, {r0, r1}
 8005494:	4613      	mov	r3, r2
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4621      	mov	r1, r4
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fbd0 	bl	8005c40 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1c58      	adds	r0, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	f000 fc1c 	bl	8005cea <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>
 80054b2:	4603      	mov	r3, r0
    }
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bdb0      	pop	{r4, r5, r7, pc}

080054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fc47 	bl	8005d62 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 80054de:	b580      	push	{r7, lr}
 80054e0:	b088      	sub	sp, #32
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	4639      	mov	r1, r7
 80054ea:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first == __last) return;
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d038      	beq.n	8005568 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3301      	adds	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	d032      	beq.n	800556a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8c>
	  if (__comp(__i, __first))
 8005504:	463b      	mov	r3, r7
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	69f9      	ldr	r1, [r7, #28]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff ffd6 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x66>
		__val = _GLIBCXX_MOVE(*__i);
 8005516:	69f8      	ldr	r0, [r7, #28]
 8005518:	f000 f951 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800551c:	4603      	mov	r3, r0
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	74fb      	strb	r3, [r7, #19]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	461a      	mov	r2, r3
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fe27 	bl	800517e <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005530:	f107 0313 	add.w	r3, r7, #19
 8005534:	4618      	mov	r0, r3
 8005536:	f000 f942 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800553a:	4603      	mov	r3, r0
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e00d      	b.n	8005560 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x82>
	    std::__unguarded_linear_insert(__i,
 8005544:	f107 0014 	add.w	r0, r7, #20
 8005548:	463b      	mov	r3, r7
 800554a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800554e:	f000 fc35 	bl	8005dbc <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	e893 0006 	ldmia.w	r3, {r1, r2}
 800555a:	69f8      	ldr	r0, [r7, #28]
 800555c:	f000 fc53 	bl	8005e06 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e7c9      	b.n	80054fc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x1e>
      if (__first == __last) return;
 8005568:	bf00      	nop
    }
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4639      	mov	r1, r7
 800557c:	e881 000c 	stmia.w	r1, {r2, r3}
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d011      	beq.n	80055b0 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x40>
	std::__unguarded_linear_insert(__i,
 800558c:	f107 0014 	add.w	r0, r7, #20
 8005590:	463b      	mov	r3, r7
 8005592:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005596:	f000 fc11 	bl	8005dbc <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80055a2:	69f8      	ldr	r0, [r7, #28]
 80055a4:	f000 fc2f 	bl	8005e06 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	e7e9      	b.n	8005584 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x14>
    }
 80055b0:	bf00      	nop
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>:
    __heap_select(_RandomAccessIterator __first,
 80055b8:	b082      	sub	sp, #8
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
      std::__make_heap(__first, __middle, __comp);
 80055c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055cc:	461a      	mov	r2, r3
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fc4e 	bl	8005e72 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d214      	bcs.n	800560c <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_+0x54>
	if (__comp(__i, __first))
 80055e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fdb6 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_+0x4c>
	  std::__pop_heap(__first, __middle, __i, __comp);
 80055f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fc73 	bl	8005eea <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SC_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	3301      	adds	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e7e6      	b.n	80055da <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_+0x22>
    }
 800560c:	bf00      	nop
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005616:	b002      	add	sp, #8
 8005618:	4770      	bx	lr

0800561a <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	dd09      	ble.n	8005644 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x2a>
	{
	  --__last;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	3b01      	subs	r3, #1
 8005634:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fc54 	bl	8005eea <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SC_>
      while (__last - __first > 1)
 8005642:	e7f0      	b.n	8005626 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0xc>
	}
    }
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	f107 0018 	add.w	r0, r7, #24
 8005662:	f7ff fd7b 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x62>
	  if (__comp(__b, __c))
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	f107 0018 	add.w	r0, r7, #24
 8005674:	f7ff fd72 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x3c>
	    std::iter_swap(__result, __b);
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fc5e 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005686:	e032      	b.n	80056ee <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
	  else if (__comp(__a, __c))
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	f107 0018 	add.w	r0, r7, #24
 8005690:	f7ff fd64 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x58>
	    std::iter_swap(__result, __c);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fc50 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80056a2:	e024      	b.n	80056ee <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
	    std::iter_swap(__result, __a);
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fc4b 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80056ac:	e01f      	b.n	80056ee <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
      else if (__comp(__a, __c))
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	f107 0018 	add.w	r0, r7, #24
 80056b6:	f7ff fd51 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x7e>
	std::iter_swap(__result, __a);
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fc3d 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80056c8:	e011      	b.n	80056ee <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
      else if (__comp(__b, __c))
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	f107 0018 	add.w	r0, r7, #24
 80056d2:	f7ff fd43 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x9a>
	std::iter_swap(__result, __c);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fc2f 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80056e4:	e003      	b.n	80056ee <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
	std::iter_swap(__result, __b);
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fc2a 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_>:
    __unguarded_partition(_RandomAccessIterator __first,
 80056f6:	b082      	sub	sp, #8
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	61fb      	str	r3, [r7, #28]
	  while (__comp(__first, __pivot))
 8005706:	f107 031c 	add.w	r3, r7, #28
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fd24 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x2c>
	    ++__first;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8005720:	e7f1      	b.n	8005706 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x10>
	  --__last;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3b01      	subs	r3, #1
 8005726:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8005728:	f107 031c 	add.w	r3, r7, #28
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fd13 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x4e>
	    --__last;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3b01      	subs	r3, #1
 8005740:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8005742:	e7f1      	b.n	8005728 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x32>
	  if (!(__first < __last))
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	429a      	cmp	r2, r3
 800574a:	d301      	bcc.n	8005750 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x5a>
	    return __first;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	e007      	b.n	8005760 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x6a>
	  std::iter_swap(__first, __last);
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fbf5 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
	  ++__first;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 800575e:	e7d2      	b.n	8005706 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x10>
    }
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800576a:	b002      	add	sp, #8
 800576c:	4770      	bx	lr

0800576e <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>:
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 800576e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681c      	ldr	r4, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TL>(__lhs)),
 8005782:	68b8      	ldr	r0, [r7, #8]
 8005784:	f000 fbea 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005788:	4603      	mov	r3, r0
 800578a:	4619      	mov	r1, r3
 800578c:	4628      	mov	r0, r5
 800578e:	f000 fbf0 	bl	8005f72 <_ZSt8__invokeIRSt8identityJRhEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 8005792:	4606      	mov	r6, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TR>(__rhs)));
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fbdf 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800579e:	4603      	mov	r3, r0
 80057a0:	4619      	mov	r1, r3
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fbe5 	bl	8005f72 <_ZSt8__invokeIRSt8identityJRhEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 80057a8:	4603      	mov	r3, r0
	  return std::__invoke(__comp,
 80057aa:	461a      	mov	r2, r3
 80057ac:	4631      	mov	r1, r6
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 fbf6 	bl	8005fa0 <_ZSt8__invokeIRNSt6ranges4lessEJRhS3_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS5_DpOS6_>
 80057b4:	4603      	mov	r3, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
    { return __it; }
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <_ZSt22__copy_move_backward_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80057ea:	b5b0      	push	{r4, r5, r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fbee 	bl	8005fd8 <_ZSt12__niter_baseIPhET_S1_>
 80057fc:	4604      	mov	r4, r0
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f000 fbea 	bl	8005fd8 <_ZSt12__niter_baseIPhET_S1_>
 8005804:	4605      	mov	r5, r0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fbe5 	bl	8005fd8 <_ZSt12__niter_baseIPhET_S1_>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	4629      	mov	r1, r5
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fbea 	bl	8005fee <_ZSt23__copy_move_backward_a1ILb1EPhS0_ET1_T0_S2_S1_>
 800581a:	4602      	mov	r2, r0
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fbf4 	bl	800600e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8005826:	4603      	mov	r3, r0
    }
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bdb0      	pop	{r4, r5, r7, pc}

08005830 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_14_Val_comp_iterIS7_EENS0_15_Iter_comp_iterIS7_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fbf0 	bl	8006026 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessESt8identityEEDaRT_RT0_EUlOS8_OSA_E_EEEONSt16remove_referenceIS8_E4typeESC_>
 8005846:	4603      	mov	r3, r0
 8005848:	4619      	mov	r1, r3
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fbf6 	bl	800603c <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIhPhEEbS8_S9_>:
	operator()(_Value& __val, _Iterator __it)
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff ff7f 	bl	800576e <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>
 8005870:	4603      	mov	r3, r0
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	e883 0006 	stmia.w	r3, {r1, r2}
	__val = _GLIBCXX_MOVE(*__last);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff ff98 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800588e:	4603      	mov	r3, r0
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	74fb      	strb	r3, [r7, #19]
      _RandomAccessIterator __next = __last;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	617b      	str	r3, [r7, #20]
      --__next;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3b01      	subs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 800589e:	f107 0113 	add.w	r1, r7, #19
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff ffd6 	bl	8005858 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIhPhEEbS8_S9_>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_+0x52>
	  *__last = _GLIBCXX_MOVE(*__next);
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f7ff ff83 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80058b8:	4603      	mov	r3, r0
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	701a      	strb	r2, [r3, #0]
	  __last = __next;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	60fb      	str	r3, [r7, #12]
	  --__next;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 80058ca:	e7e8      	b.n	800589e <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_+0x24>
      *__last = _GLIBCXX_MOVE(__val);
 80058cc:	f107 0313 	add.w	r3, r7, #19
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ff74 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80058d6:	4603      	mov	r3, r0
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	701a      	strb	r2, [r3, #0]
    }
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __heap_select(_RandomAccessIterator __first,
 80058e6:	b082      	sub	sp, #8
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
      std::__make_heap(__first, __middle, __comp);
 80058f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058fa:	461a      	mov	r2, r3
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fbb0 	bl	8006064 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	429a      	cmp	r2, r3
 800590e:	d214      	bcs.n	800593a <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x54>
	if (__comp(__i, __first))
 8005910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	6979      	ldr	r1, [r7, #20]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fd03 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x4c>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8005924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fbd5 	bl	80060dc <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3301      	adds	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e7e6      	b.n	8005908 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x22>
    }
 800593a:	bf00      	nop
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005944:	b002      	add	sp, #8
 8005946:	4770      	bx	lr

08005948 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	dd09      	ble.n	8005972 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	  --__last;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3b01      	subs	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fbb6 	bl	80060dc <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      while (__last - __first > 1)
 8005970:	e7f0      	b.n	8005954 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0xc>
    }
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	f107 0018 	add.w	r0, r7, #24
 8005990:	f7ff fcc8 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d020      	beq.n	80059dc <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x62>
	  if (__comp(__b, __c))
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	f107 0018 	add.w	r0, r7, #24
 80059a2:	f7ff fcbf 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x3c>
	    std::iter_swap(__result, __b);
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fac7 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80059b4:	e032      	b.n	8005a1c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	  else if (__comp(__a, __c))
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	f107 0018 	add.w	r0, r7, #24
 80059be:	f7ff fcb1 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x58>
	    std::iter_swap(__result, __c);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fab9 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80059d0:	e024      	b.n	8005a1c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	    std::iter_swap(__result, __a);
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fab4 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80059da:	e01f      	b.n	8005a1c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__a, __c))
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	f107 0018 	add.w	r0, r7, #24
 80059e4:	f7ff fc9e 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x7e>
	std::iter_swap(__result, __a);
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 faa6 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80059f6:	e011      	b.n	8005a1c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__b, __c))
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	f107 0018 	add.w	r0, r7, #24
 8005a00:	f7ff fc90 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x9a>
	std::iter_swap(__result, __c);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fa98 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005a12:	e003      	b.n	8005a1c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	std::iter_swap(__result, __b);
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fa93 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8005a24:	b082      	sub	sp, #8
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	61fb      	str	r3, [r7, #28]
	  while (__comp(__first, __pivot))
 8005a34:	f107 031c 	add.w	r3, r7, #28
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fc71 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x2c>
	    ++__first;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8005a4e:	e7f1      	b.n	8005a34 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
	  --__last;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8005a56:	f107 031c 	add.w	r3, r7, #28
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fc60 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x4e>
	    --__last;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8005a70:	e7f1      	b.n	8005a56 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x32>
	  if (!(__first < __last))
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d301      	bcc.n	8005a7e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x5a>
	    return __first;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	e007      	b.n	8005a8e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x6a>
	  std::iter_swap(__first, __last);
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fa5e 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
	  ++__first;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8005a8c:	e7d2      	b.n	8005a34 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
    }
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a98:	b002      	add	sp, #8
 8005a9a:	4770      	bx	lr

08005a9c <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>:
 8005a9c:	b5b0      	push	{r4, r5, r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681c      	ldr	r4, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TL>(__lhs)),
 8005ab0:	68b8      	ldr	r0, [r7, #8]
 8005ab2:	f000 fa53 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4628      	mov	r0, r5
 8005abc:	f000 fb3a 	bl	8006134 <_ZSt8__invokeIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	613b      	str	r3, [r7, #16]
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TR>(__rhs)));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fa47 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 fb2e 	bl	8006134 <_ZSt8__invokeIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	617b      	str	r3, [r7, #20]
	  return std::__invoke(__comp,
 8005adc:	f107 0214 	add.w	r2, r7, #20
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fb3b 	bl	8006162 <_ZSt8__invokeIRNSt6ranges4lessEJiiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 8005aec:	4603      	mov	r3, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}

08005af6 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>:
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fb47 	bl	800619a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0EEJLNS8_10FilterModeE1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4619      	mov	r1, r3
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fb4d 	bl	80061b0 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>:
	operator()(_Value& __val, _Iterator __it)
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff ffb3 	bl	8005a9c <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 8005b36:	4603      	mov	r3, r0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	e883 0006 	stmia.w	r3, {r1, r2}
	__val = _GLIBCXX_MOVE(*__last);
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fe35 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	74fb      	strb	r3, [r7, #19]
      _RandomAccessIterator __next = __last;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	617b      	str	r3, [r7, #20]
      --__next;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8005b64:	f107 0113 	add.w	r1, r7, #19
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ffd6 	bl	8005b1e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x52>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005b78:	6978      	ldr	r0, [r7, #20]
 8005b7a:	f7ff fe20 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	701a      	strb	r2, [r3, #0]
	  __last = __next;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	60fb      	str	r3, [r7, #12]
	  --__next;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8005b90:	e7e8      	b.n	8005b64 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x24>
      *__last = _GLIBCXX_MOVE(__val);
 8005b92:	f107 0313 	add.w	r3, r7, #19
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fe11 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	701a      	strb	r2, [r3, #0]
    }
 8005ba4:	bf00      	nop
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __heap_select(_RandomAccessIterator __first,
 8005bac:	b082      	sub	sp, #8
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
      std::__make_heap(__first, __middle, __comp);
 8005bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fb07 	bl	80061d8 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d214      	bcs.n	8005c00 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x54>
	if (__comp(__i, __first))
 8005bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff fc6c 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x4c>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8005bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fb2c 	bl	8006250 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e7e6      	b.n	8005bce <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x22>
    }
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c0a:	b002      	add	sp, #8
 8005c0c:	4770      	bx	lr

08005c0e <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	dd09      	ble.n	8005c38 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	  --__last;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fb0d 	bl	8006250 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      while (__last - __first > 1)
 8005c36:	e7f0      	b.n	8005c1a <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0xc>
    }
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	f107 0018 	add.w	r0, r7, #24
 8005c56:	f7ff fc31 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d020      	beq.n	8005ca2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x62>
	  if (__comp(__b, __c))
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	f107 0018 	add.w	r0, r7, #24
 8005c68:	f7ff fc28 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x3c>
	    std::iter_swap(__result, __b);
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f964 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005c7a:	e032      	b.n	8005ce2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	  else if (__comp(__a, __c))
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	f107 0018 	add.w	r0, r7, #24
 8005c84:	f7ff fc1a 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x58>
	    std::iter_swap(__result, __c);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f956 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005c96:	e024      	b.n	8005ce2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	    std::iter_swap(__result, __a);
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f951 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005ca0:	e01f      	b.n	8005ce2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__a, __c))
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	f107 0018 	add.w	r0, r7, #24
 8005caa:	f7ff fc07 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x7e>
	std::iter_swap(__result, __a);
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f943 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005cbc:	e011      	b.n	8005ce2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__b, __c))
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	f107 0018 	add.w	r0, r7, #24
 8005cc6:	f7ff fbf9 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x9a>
	std::iter_swap(__result, __c);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f935 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005cd8:	e003      	b.n	8005ce2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	std::iter_swap(__result, __b);
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f930 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8005cea:	b082      	sub	sp, #8
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	61fb      	str	r3, [r7, #28]
	  while (__comp(__first, __pivot))
 8005cfa:	f107 031c 	add.w	r3, r7, #28
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fbda 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x2c>
	    ++__first;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8005d14:	e7f1      	b.n	8005cfa <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
	  --__last;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8005d1c:	f107 031c 	add.w	r3, r7, #28
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fbc9 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x4e>
	    --__last;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8005d36:	e7f1      	b.n	8005d1c <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x32>
	  if (!(__first < __last))
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d301      	bcc.n	8005d44 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x5a>
	    return __first;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	e007      	b.n	8005d54 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x6a>
	  std::iter_swap(__first, __last);
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f8fb 	bl	8005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>
	  ++__first;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8005d52:	e7d2      	b.n	8005cfa <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
    }
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d5e:	b002      	add	sp, #8
 8005d60:	4770      	bx	lr

08005d62 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>:
 8005d62:	b5b0      	push	{r4, r5, r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681c      	ldr	r4, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TL>(__lhs)),
 8005d76:	68b8      	ldr	r0, [r7, #8]
 8005d78:	f000 f8f0 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 fa91 	bl	80062a8 <_ZSt8__invokeIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8005d86:	4603      	mov	r3, r0
 8005d88:	613b      	str	r3, [r7, #16]
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TR>(__rhs)));
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8e4 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4619      	mov	r1, r3
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f000 fa85 	bl	80062a8 <_ZSt8__invokeIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	617b      	str	r3, [r7, #20]
	  return std::__invoke(__comp,
 8005da2:	f107 0214 	add.w	r2, r7, #20
 8005da6:	f107 0310 	add.w	r3, r7, #16
 8005daa:	4619      	mov	r1, r3
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 f9d8 	bl	8006162 <_ZSt8__invokeIRNSt6ranges4lessEJiiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 8005db2:	4603      	mov	r3, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bdb0      	pop	{r4, r5, r7, pc}

08005dbc <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>:
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fa82 	bl	80062d6 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0EEJLNS8_10FilterModeE0EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fa88 	bl	80062ec <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>:
	operator()(_Value& __val, _Iterator __it)
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff ffb3 	bl	8005d62 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	e883 0006 	stmia.w	r3, {r1, r2}
	__val = _GLIBCXX_MOVE(*__last);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fcd2 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	74fb      	strb	r3, [r7, #19]
      _RandomAccessIterator __next = __last;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	617b      	str	r3, [r7, #20]
      --__next;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8005e2a:	f107 0113 	add.w	r1, r7, #19
 8005e2e:	1d3b      	adds	r3, r7, #4
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff ffd6 	bl	8005de4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x52>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7ff fcbd 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005e44:	4603      	mov	r3, r0
 8005e46:	781a      	ldrb	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	701a      	strb	r2, [r3, #0]
	  __last = __next;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	60fb      	str	r3, [r7, #12]
	  --__next;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8005e56:	e7e8      	b.n	8005e2a <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x24>
      *__last = _GLIBCXX_MOVE(__val);
 8005e58:	f107 0313 	add.w	r3, r7, #19
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fcae 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005e62:	4603      	mov	r3, r0
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	701a      	strb	r2, [r3, #0]
    }
 8005e6a:	bf00      	nop
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b08a      	sub	sp, #40	; 0x28
 8005e76:	af02      	add	r7, sp, #8
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	dd2a      	ble.n	8005ede <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x6c>
      const _DistanceType __len = __last - __first;
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	3b02      	subs	r3, #2
 8005e94:	0fda      	lsrs	r2, r3, #31
 8005e96:	4413      	add	r3, r2
 8005e98:	105b      	asrs	r3, r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fc8b 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	75fb      	strb	r3, [r7, #23]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8005eae:	f107 0317 	add.w	r3, r7, #23
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fc83 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	466a      	mov	r2, sp
 8005ec0:	c903      	ldmia	r1, {r0, r1}
 8005ec2:	e882 0003 	stmia.w	r2, {r0, r1}
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fa36 	bl	800633c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
	  if (__parent == 0)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x70>
	  __parent--;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
      while (true)
 8005edc:	e7de      	b.n	8005e9c <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x2a>
	return;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x72>
	    return;
 8005ee2:	bf00      	nop
    }
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SC_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005eea:	b590      	push	{r4, r7, lr}
 8005eec:	b089      	sub	sp, #36	; 0x24
 8005eee:	af02      	add	r7, sp, #8
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fc60 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005efe:	4603      	mov	r3, r0
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	75fb      	strb	r3, [r7, #23]
      *__result = _GLIBCXX_MOVE(*__first);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff fc5a 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	701a      	strb	r2, [r3, #0]
			 _DistanceType(__last - __first),
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1ad4      	subs	r4, r2, r3
			 _GLIBCXX_MOVE(__value), __comp);
 8005f18:	f107 0317 	add.w	r3, r7, #23
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fc4e 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8005f22:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	466a      	mov	r2, sp
 8005f2a:	c903      	ldmia	r1, {r0, r1}
 8005f2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f30:	4622      	mov	r2, r4
 8005f32:	2100      	movs	r1, #0
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa01 	bl	800633c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
    }
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd90      	pop	{r4, r7, pc}

08005f42 <_ZSt9iter_swapIPhS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa6d 	bl	800642e <_ZSt4swapIhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <_ZSt8__invokeIRSt8identityJRhEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005f72:	b5b0      	push	{r4, r5, r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa75 	bl	800646c <_ZSt7forwardIRSt8identityEOT_RNSt16remove_referenceIS2_E4typeE>
 8005f82:	4604      	mov	r4, r0
 8005f84:	6838      	ldr	r0, [r7, #0]
 8005f86:	f7ff ffe9 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4628      	mov	r0, r5
 8005f92:	f000 fa76 	bl	8006482 <_ZSt13__invoke_implIRhRSt8identityJS0_EET_St14__invoke_otherOT0_DpOT1_>
 8005f96:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bdb0      	pop	{r4, r5, r7, pc}

08005fa0 <_ZSt8__invokeIRNSt6ranges4lessEJRhS3_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS5_DpOS6_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fa7f 	bl	80064b0 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	68b8      	ldr	r0, [r7, #8]
 8005fb6:	f7ff ffd1 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005fba:	4605      	mov	r5, r0
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ffcd 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f000 fa7c 	bl	80064c6 <_ZSt13__invoke_implIbRNSt6ranges4lessEJRhS3_EET_St14__invoke_otherOT0_DpOT1_>
 8005fce:	4603      	mov	r3, r0
    }
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd8 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <_ZSt23__copy_move_backward_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fa7e 	bl	8006500 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8006004:	4603      	mov	r3, r0
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessESt8identityEEDaRT_RT0_EUlOS8_OSA_E_EEEONSt16remove_referenceIS8_E4typeESC_>:
    move(_Tp&& __t) noexcept
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe febf 	bl	8004dcc <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 800604e:	4602      	mov	r2, r0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006056:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	dd2a      	ble.n	80060d0 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x6c>
      const _DistanceType __len = __last - __first;
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	3b02      	subs	r3, #2
 8006086:	0fda      	lsrs	r2, r3, #31
 8006088:	4413      	add	r3, r2
 800608a:	105b      	asrs	r3, r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fb92 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800609a:	4603      	mov	r3, r0
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	75fb      	strb	r3, [r7, #23]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80060a0:	f107 0317 	add.w	r3, r7, #23
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fb8a 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80060aa:	4603      	mov	r3, r0
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	466a      	mov	r2, sp
 80060b2:	c903      	ldmia	r1, {r0, r1}
 80060b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fa50 	bl	8006562 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x70>
	  __parent--;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
      while (true)
 80060ce:	e7de      	b.n	800608e <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	return;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x72>
	    return;
 80060d4:	bf00      	nop
    }
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b089      	sub	sp, #36	; 0x24
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff fb67 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80060f0:	4603      	mov	r3, r0
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	75fb      	strb	r3, [r7, #23]
      *__result = _GLIBCXX_MOVE(*__first);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fb61 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80060fc:	4603      	mov	r3, r0
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	701a      	strb	r2, [r3, #0]
			 _DistanceType(__last - __first),
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad4      	subs	r4, r2, r3
			 _GLIBCXX_MOVE(__value), __comp);
 800610a:	f107 0317 	add.w	r3, r7, #23
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fb55 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006114:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	466a      	mov	r2, sp
 800611c:	c903      	ldmia	r1, {r0, r1}
 800611e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006122:	4622      	mov	r2, r4
 8006124:	2100      	movs	r1, #0
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fa1b 	bl	8006562 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
    }
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd90      	pop	{r4, r7, pc}

08006134 <_ZSt8__invokeIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8006134:	b5b0      	push	{r4, r5, r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa88 	bl	8006654 <_ZSt7forwardIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 8006144:	4604      	mov	r4, r0
 8006146:	6838      	ldr	r0, [r7, #0]
 8006148:	f7ff ff08 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 fa89 	bl	800666a <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>
 8006158:	4603      	mov	r3, r0
    }
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bdb0      	pop	{r4, r5, r7, pc}

08006162 <_ZSt8__invokeIRNSt6ranges4lessEJiiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8006162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f99e 	bl	80064b0 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006174:	4604      	mov	r4, r0
 8006176:	68b8      	ldr	r0, [r7, #8]
 8006178:	f7fc f977 	bl	800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800617c:	4605      	mov	r5, r0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc f973 	bl	800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006184:	4603      	mov	r3, r0
 8006186:	462a      	mov	r2, r5
 8006188:	4621      	mov	r1, r4
 800618a:	4630      	mov	r0, r6
 800618c:	f000 fa85 	bl	800669a <_ZSt13__invoke_implIbRNSt6ranges4lessEJiiEET_St14__invoke_otherOT0_DpOT1_>
 8006190:	4603      	mov	r3, r0
    }
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800619a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0EEJLNS8_10FilterModeE1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>:
    move(_Tp&& __t) noexcept
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fe83 	bl	8004ec8 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 80061c2:	4602      	mov	r2, r0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061ca:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	dd2a      	ble.n	8006244 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x6c>
      const _DistanceType __len = __last - __first;
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	3b02      	subs	r3, #2
 80061fa:	0fda      	lsrs	r2, r3, #31
 80061fc:	4413      	add	r3, r2
 80061fe:	105b      	asrs	r3, r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fad8 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800620e:	4603      	mov	r3, r0
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	75fb      	strb	r3, [r7, #23]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8006214:	f107 0317 	add.w	r3, r7, #23
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff fad0 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800621e:	4603      	mov	r3, r0
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	466a      	mov	r2, sp
 8006226:	c903      	ldmia	r1, {r0, r1}
 8006228:	e882 0003 	stmia.w	r2, {r0, r1}
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	69f9      	ldr	r1, [r7, #28]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fa63 	bl	80066fc <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x70>
	  __parent--;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3b01      	subs	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
      while (true)
 8006242:	e7de      	b.n	8006202 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	return;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x72>
	    return;
 8006248:	bf00      	nop
    }
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff faad 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006264:	4603      	mov	r3, r0
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	75fb      	strb	r3, [r7, #23]
      *__result = _GLIBCXX_MOVE(*__first);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff faa7 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006270:	4603      	mov	r3, r0
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	701a      	strb	r2, [r3, #0]
			 _DistanceType(__last - __first),
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad4      	subs	r4, r2, r3
			 _GLIBCXX_MOVE(__value), __comp);
 800627e:	f107 0317 	add.w	r3, r7, #23
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fa9b 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006288:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	466a      	mov	r2, sp
 8006290:	c903      	ldmia	r1, {r0, r1}
 8006292:	e882 0003 	stmia.w	r2, {r0, r1}
 8006296:	4622      	mov	r2, r4
 8006298:	2100      	movs	r1, #0
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa2e 	bl	80066fc <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
    }
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd90      	pop	{r4, r7, pc}

080062a8 <_ZSt8__invokeIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80062a8:	b5b0      	push	{r4, r5, r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa9b 	bl	80067ee <_ZSt7forwardIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 80062b8:	4604      	mov	r4, r0
 80062ba:	6838      	ldr	r0, [r7, #0]
 80062bc:	f7ff fe4e 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 fa9c 	bl	8006804 <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>
 80062cc:	4603      	mov	r3, r0
    }
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bdb0      	pop	{r4, r5, r7, pc}

080062d6 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0EEJLNS8_10FilterModeE0EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>:
    move(_Tp&& __t) noexcept
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fe63 	bl	8004fc4 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 80062fe:	4602      	mov	r2, r0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006306:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fd53 	bl	8004dcc <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 8006326:	4602      	mov	r2, r0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800632e:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	70fb      	strb	r3, [r7, #3]
      const _Distance __topIndex = __holeIndex;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3b01      	subs	r3, #1
 8006356:	0fda      	lsrs	r2, r3, #31
 8006358:	4413      	add	r3, r2
 800635a:	105b      	asrs	r3, r3, #1
 800635c:	461a      	mov	r2, r3
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4293      	cmp	r3, r2
 8006362:	da24      	bge.n	80063ae <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x72>
	  __secondChild = 2 * (__secondChild + 1);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3301      	adds	r3, #1
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3b01      	subs	r3, #1
	  if (__comp(__first + __secondChild,
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	461a      	mov	r2, r3
 800637c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006380:	f7fe feec 	bl	800515c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x54>
	    __secondChild--;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3b01      	subs	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fa11 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800639c:	4601      	mov	r1, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	780a      	ldrb	r2, [r1, #0]
 80063a6:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 80063ac:	e7d1      	b.n	8006352 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11c      	bne.n	80063f2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xb6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3b02      	subs	r3, #2
 80063bc:	0fda      	lsrs	r2, r3, #31
 80063be:	4413      	add	r3, r2
 80063c0:	105b      	asrs	r3, r3, #1
 80063c2:	461a      	mov	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d113      	bne.n	80063f2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff f9ef 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80063e0:	4601      	mov	r1, r0
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	780a      	ldrb	r2, [r1, #0]
 80063ea:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 80063f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80063f6:	f7ff fe16 	bl	8006026 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessESt8identityEEDaRT_RT0_EUlOS8_OSA_E_EEEONSt16remove_referenceIS8_E4typeESC_>
 80063fa:	4602      	mov	r2, r0
 80063fc:	f107 0310 	add.w	r3, r7, #16
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ff86 	bl	8006314 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8006408:	1cfb      	adds	r3, r7, #3
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff f9d7 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006410:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	f107 0310 	add.w	r3, r7, #16
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4613      	mov	r3, r2
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fa18 	bl	8006856 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_>
    }
 8006426:	bf00      	nop
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <_ZSt4swapIhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f9c0 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800643e:	4603      	mov	r3, r0
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 8006444:	6838      	ldr	r0, [r7, #0]
 8006446:	f7ff f9ba 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800644a:	4603      	mov	r3, r0
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006452:	f107 030f 	add.w	r3, r7, #15
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff f9b1 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800645c:	4603      	mov	r3, r0
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	701a      	strb	r2, [r3, #0]
    }
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_ZSt7forwardIRSt8identityEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <_ZSt13__invoke_implIRhRSt8identityJS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006482:	b590      	push	{r4, r7, lr}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	7338      	strb	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800648e:	68b8      	ldr	r0, [r7, #8]
 8006490:	f7ff ffec 	bl	800646c <_ZSt7forwardIRSt8identityEOT_RNSt16remove_referenceIS2_E4typeE>
 8006494:	4604      	mov	r4, r0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fd60 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800649c:	4603      	mov	r3, r0
 800649e:	4619      	mov	r1, r3
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 fa1c 	bl	80068de <_ZNKSt8identityclIRhEEOT_S3_>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd90      	pop	{r4, r7, pc}

080064b0 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <_ZSt13__invoke_implIbRNSt6ranges4lessEJRhS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80064c6:	b5b0      	push	{r4, r5, r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	7338      	strb	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80064d4:	68b8      	ldr	r0, [r7, #8]
 80064d6:	f7ff ffeb 	bl	80064b0 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 80064da:	4604      	mov	r4, r0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fd3d 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80064e2:	4605      	mov	r5, r0
 80064e4:	6838      	ldr	r0, [r7, #0]
 80064e6:	f7ff fd39 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	4629      	mov	r1, r5
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fa01 	bl	80068f8 <_ZNKSt6ranges4lessclIRhS2_EEbOT_OT0_>
 80064f6:	4603      	mov	r3, r0
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bdb0      	pop	{r4, r5, r7, pc}

08006500 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800650c:	f7fb fd9e 	bl	800204c <_ZSt21is_constant_evaluatedv>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d006      	beq.n	8006524 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fa05 	bl	800692a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_>
 8006520:	4603      	mov	r3, r0
 8006522:	e006      	b.n	8006532 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fa21 	bl	8006970 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>
 800652e:	4603      	mov	r3, r0
								 __result);
 8006530:	bf00      	nop
    }
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fcbe 	bl	8004ec8 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 800654c:	4602      	mov	r2, r0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006554:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8006562:	b580      	push	{r7, lr}
 8006564:	b08a      	sub	sp, #40	; 0x28
 8006566:	af02      	add	r7, sp, #8
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	70fb      	strb	r3, [r7, #3]
      const _Distance __topIndex = __holeIndex;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3b01      	subs	r3, #1
 800657c:	0fda      	lsrs	r2, r3, #31
 800657e:	4413      	add	r3, r2
 8006580:	105b      	asrs	r3, r3, #1
 8006582:	461a      	mov	r2, r3
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	4293      	cmp	r3, r2
 8006588:	da24      	bge.n	80065d4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x72>
	  __secondChild = 2 * (__secondChild + 1);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	3b01      	subs	r3, #1
	  if (__comp(__first + __secondChild,
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	461a      	mov	r2, r3
 80065a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80065a6:	f7fe febd 	bl	8005324 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x54>
	    __secondChild--;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff f8fe 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80065c2:	4601      	mov	r1, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	780a      	ldrb	r2, [r1, #0]
 80065cc:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 80065d2:	e7d1      	b.n	8006578 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11c      	bne.n	8006618 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3b02      	subs	r3, #2
 80065e2:	0fda      	lsrs	r2, r3, #31
 80065e4:	4413      	add	r3, r2
 80065e6:	105b      	asrs	r3, r3, #1
 80065e8:	461a      	mov	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d113      	bne.n	8006618 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	3301      	adds	r3, #1
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff f8dc 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006606:	4601      	mov	r1, r0
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	780a      	ldrb	r2, [r1, #0]
 8006610:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	3b01      	subs	r3, #1
 8006616:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8006618:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800661c:	f7ff fdbd 	bl	800619a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0EEJLNS8_10FilterModeE1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 8006620:	4602      	mov	r2, r0
 8006622:	f107 0310 	add.w	r3, r7, #16
 8006626:	4611      	mov	r1, r2
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff ff86 	bl	800653a <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800662e:	1cfb      	adds	r3, r7, #3
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff f8c4 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006636:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	f107 0310 	add.w	r3, r7, #16
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f9c1 	bl	80069ce <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>
    }
 800664c:	bf00      	nop
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZSt7forwardIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800666a:	b590      	push	{r4, r7, lr}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	7338      	strb	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	f7ff ffec 	bl	8006654 <_ZSt7forwardIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 800667c:	4604      	mov	r4, r0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fc6c 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8006684:	4603      	mov	r3, r0
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	4620      	mov	r0, r4
 800668c:	f7fc faa6 	bl	8002bdc <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>
 8006690:	4603      	mov	r3, r0
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}

0800669a <_ZSt13__invoke_implIbRNSt6ranges4lessEJiiEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800669a:	b5b0      	push	{r4, r5, r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	7338      	strb	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f7ff ff01 	bl	80064b0 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 80066ae:	4604      	mov	r4, r0
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fb feda 	bl	800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80066b6:	4605      	mov	r5, r0
 80066b8:	6838      	ldr	r0, [r7, #0]
 80066ba:	f7fb fed6 	bl	800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	4629      	mov	r1, r5
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 f9c6 	bl	8006a56 <_ZNKSt6ranges4lessclIiiEEbOT_OT0_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bdb0      	pop	{r4, r5, r7, pc}

080066d4 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fc6f 	bl	8004fc4 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 80066e6:	4602      	mov	r2, r0
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ee:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	70fb      	strb	r3, [r7, #3]
      const _Distance __topIndex = __holeIndex;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3b01      	subs	r3, #1
 8006716:	0fda      	lsrs	r2, r3, #31
 8006718:	4413      	add	r3, r2
 800671a:	105b      	asrs	r3, r3, #1
 800671c:	461a      	mov	r2, r3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4293      	cmp	r3, r2
 8006722:	da24      	bge.n	800676e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x72>
	  __secondChild = 2 * (__secondChild + 1);
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3301      	adds	r3, #1
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3b01      	subs	r3, #1
	  if (__comp(__first + __secondChild,
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	461a      	mov	r2, r3
 800673c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006740:	f7fe febc 	bl	80054bc <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x54>
	    __secondChild--;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3b01      	subs	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff f831 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800675c:	4601      	mov	r1, r0
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	780a      	ldrb	r2, [r1, #0]
 8006766:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 800676c:	e7d1      	b.n	8006712 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d11c      	bne.n	80067b2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b02      	subs	r3, #2
 800677c:	0fda      	lsrs	r2, r3, #31
 800677e:	4413      	add	r3, r2
 8006780:	105b      	asrs	r3, r3, #1
 8006782:	461a      	mov	r2, r3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4293      	cmp	r3, r2
 8006788:	d113      	bne.n	80067b2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3301      	adds	r3, #1
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3b01      	subs	r3, #1
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff f80f 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80067a0:	4601      	mov	r1, r0
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	780a      	ldrb	r2, [r1, #0]
 80067aa:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 80067b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80067b6:	f7ff fd8e 	bl	80062d6 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0EEJLNS8_10FilterModeE0EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 80067ba:	4602      	mov	r2, r0
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	4611      	mov	r1, r2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff ff86 	bl	80066d4 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 80067c8:	1cfb      	adds	r3, r7, #3
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fff7 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80067d0:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	4613      	mov	r3, r2
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f962 	bl	8006aaa <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>
    }
 80067e6:	bf00      	nop
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <_ZSt7forwardIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	7338      	strb	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006810:	68b8      	ldr	r0, [r7, #8]
 8006812:	f7ff ffec 	bl	80067ee <_ZSt7forwardIRZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 8006816:	4604      	mov	r4, r0
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fb9f 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800681e:	4603      	mov	r3, r0
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4619      	mov	r1, r3
 8006824:	4620      	mov	r0, r4
 8006826:	f7fd ff31 	bl	800468c <_ZZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>
 800682a:	4603      	mov	r3, r0
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bd90      	pop	{r4, r7, pc}

08006834 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhhEEbS7_SA_>:
	operator()(_Iterator __it, _Value& __val)
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe ff91 	bl	800576e <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>
 800684c:	4603      	mov	r3, r0
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	70fb      	strb	r3, [r7, #3]
      _Distance __parent = (__holeIndex - 1) / 2;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3b01      	subs	r3, #1
 8006868:	0fda      	lsrs	r2, r3, #31
 800686a:	4413      	add	r3, r2
 800686c:	105b      	asrs	r3, r3, #1
 800686e:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	dd0c      	ble.n	8006892 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x3c>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	1cfa      	adds	r2, r7, #3
 8006880:	4619      	mov	r1, r3
 8006882:	6a38      	ldr	r0, [r7, #32]
 8006884:	f7ff ffd6 	bl	8006834 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhhEEbS7_SA_>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x3c>
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x3e>
 8006892:	2300      	movs	r3, #0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d014      	beq.n	80068c2 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x6c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe ff8d 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80068a4:	4601      	mov	r1, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	780a      	ldrb	r2, [r1, #0]
 80068ae:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __parent;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	0fda      	lsrs	r2, r3, #31
 80068ba:	4413      	add	r3, r2
 80068bc:	105b      	asrs	r3, r3, #1
 80068be:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80068c0:	e7d6      	b.n	8006870 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80068c2:	1cfb      	adds	r3, r7, #3
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe ff7a 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80068ca:	4601      	mov	r1, r0
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	780a      	ldrb	r2, [r1, #0]
 80068d4:	701a      	strb	r2, [r3, #0]
    }
 80068d6:	bf00      	nop
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <_ZNKSt8identityclIRhEEOT_S3_>:
  /// [func.identity] The identity function.
  struct identity
  {
    template<typename _Tp>
      constexpr _Tp&&
      operator()(_Tp&& __t) const noexcept
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__t); }
 80068e8:	6838      	ldr	r0, [r7, #0]
 80068ea:	f7ff fb37 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <_ZNKSt6ranges4lessclIRhS2_EEbOT_OT0_>:
  struct less
  {
    template<typename _Tp, typename _Up>
      requires totally_ordered_with<_Tp, _Up>
      constexpr bool
      operator()(_Tp&& __t, _Up&& __u) const
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>(
	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
	    return __x < __y;
	  }
	else
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 8006904:	68b8      	ldr	r0, [r7, #8]
 8006906:	f7ff fb29 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800690a:	4603      	mov	r3, r0
 800690c:	781c      	ldrb	r4, [r3, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fb24 	bl	8005f5c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8006914:	4603      	mov	r3, r0
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	429c      	cmp	r4, r3
 800691a:	bf34      	ite	cc
 800691c:	2301      	movcc	r3, #1
 800691e:	2300      	movcs	r3, #0
 8006920:	b2db      	uxtb	r3, r3
      }
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}

0800692a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	dd10      	ble.n	8006966 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_+0x3c>
	    *--__result = std::move(*--__last);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	3b01      	subs	r3, #1
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f7fe ff37 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006950:	4603      	mov	r3, r0
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3b01      	subs	r3, #1
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	3b01      	subs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e7eb      	b.n	800693e <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_+0x14>
	  return __result;
 8006966:	687b      	ldr	r3, [r7, #4]
	}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	425b      	negs	r3, r3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f8fe 	bl	8006b98 <memmove>
	  return __result - _Num;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	425b      	negs	r3, r3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
	}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>:
	operator()(_Iterator __it, _Value& __val)
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff f86c 	bl	8005a9c <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 80069c4:	4603      	mov	r3, r0
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	70fb      	strb	r3, [r7, #3]
      _Distance __parent = (__holeIndex - 1) / 2;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	3b01      	subs	r3, #1
 80069e0:	0fda      	lsrs	r2, r3, #31
 80069e2:	4413      	add	r3, r2
 80069e4:	105b      	asrs	r3, r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	dd0c      	ble.n	8006a0a <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	1cfa      	adds	r2, r7, #3
 80069f8:	4619      	mov	r1, r3
 80069fa:	6a38      	ldr	r0, [r7, #32]
 80069fc:	f7ff ffd6 	bl	80069ac <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3e>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d014      	beq.n	8006a3a <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x6c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fed1 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	780a      	ldrb	r2, [r1, #0]
 8006a26:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __parent;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	0fda      	lsrs	r2, r3, #31
 8006a32:	4413      	add	r3, r2
 8006a34:	105b      	asrs	r3, r3, #1
 8006a36:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006a38:	e7d6      	b.n	80069e8 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8006a3a:	1cfb      	adds	r3, r7, #3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe febe 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006a42:	4601      	mov	r1, r0
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	780a      	ldrb	r2, [r1, #0]
 8006a4c:	701a      	strb	r2, [r3, #0]
    }
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <_ZNKSt6ranges4lessclIiiEEbOT_OT0_>:
      operator()(_Tp&& __t, _Up&& __u) const
 8006a56:	b590      	push	{r4, r7, lr}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f7fb fd01 	bl	800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	681c      	ldr	r4, [r3, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7fb fcfc 	bl	800246a <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006a72:	4603      	mov	r3, r0
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	429c      	cmp	r4, r3
 8006a78:	bfb4      	ite	lt
 8006a7a:	2301      	movlt	r3, #1
 8006a7c:	2300      	movge	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
      }
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd90      	pop	{r4, r7, pc}

08006a88 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>:
	operator()(_Iterator __it, _Value& __val)
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff f961 	bl	8005d62 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	70fb      	strb	r3, [r7, #3]
      _Distance __parent = (__holeIndex - 1) / 2;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	0fda      	lsrs	r2, r3, #31
 8006abe:	4413      	add	r3, r2
 8006ac0:	105b      	asrs	r3, r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dd0c      	ble.n	8006ae6 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	1cfa      	adds	r2, r7, #3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6a38      	ldr	r0, [r7, #32]
 8006ad8:	f7ff ffd6 	bl	8006a88 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3e>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d014      	beq.n	8006b16 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x6c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fe63 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006af8:	4601      	mov	r1, r0
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	780a      	ldrb	r2, [r1, #0]
 8006b02:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __parent;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	0fda      	lsrs	r2, r3, #31
 8006b0e:	4413      	add	r3, r2
 8006b10:	105b      	asrs	r3, r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006b14:	e7d6      	b.n	8006ac4 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM039013FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8006b16:	1cfb      	adds	r3, r7, #3
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fe50 	bl	80057be <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8006b1e:	4601      	mov	r1, r0
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	780a      	ldrb	r2, [r1, #0]
 8006b28:	701a      	strb	r2, [r3, #0]
    }
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <__libc_init_array>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4d0d      	ldr	r5, [pc, #52]	; (8006b6c <__libc_init_array+0x38>)
 8006b38:	4c0d      	ldr	r4, [pc, #52]	; (8006b70 <__libc_init_array+0x3c>)
 8006b3a:	1b64      	subs	r4, r4, r5
 8006b3c:	10a4      	asrs	r4, r4, #2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	42a6      	cmp	r6, r4
 8006b42:	d109      	bne.n	8006b58 <__libc_init_array+0x24>
 8006b44:	4d0b      	ldr	r5, [pc, #44]	; (8006b74 <__libc_init_array+0x40>)
 8006b46:	4c0c      	ldr	r4, [pc, #48]	; (8006b78 <__libc_init_array+0x44>)
 8006b48:	f000 f848 	bl	8006bdc <_init>
 8006b4c:	1b64      	subs	r4, r4, r5
 8006b4e:	10a4      	asrs	r4, r4, #2
 8006b50:	2600      	movs	r6, #0
 8006b52:	42a6      	cmp	r6, r4
 8006b54:	d105      	bne.n	8006b62 <__libc_init_array+0x2e>
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5c:	4798      	blx	r3
 8006b5e:	3601      	adds	r6, #1
 8006b60:	e7ee      	b.n	8006b40 <__libc_init_array+0xc>
 8006b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b66:	4798      	blx	r3
 8006b68:	3601      	adds	r6, #1
 8006b6a:	e7f2      	b.n	8006b52 <__libc_init_array+0x1e>
 8006b6c:	08006c48 	.word	0x08006c48
 8006b70:	08006c48 	.word	0x08006c48
 8006b74:	08006c48 	.word	0x08006c48
 8006b78:	08006c4c 	.word	0x08006c4c

08006b7c <memcpy>:
 8006b7c:	440a      	add	r2, r1
 8006b7e:	4291      	cmp	r1, r2
 8006b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b84:	d100      	bne.n	8006b88 <memcpy+0xc>
 8006b86:	4770      	bx	lr
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b92:	4291      	cmp	r1, r2
 8006b94:	d1f9      	bne.n	8006b8a <memcpy+0xe>
 8006b96:	bd10      	pop	{r4, pc}

08006b98 <memmove>:
 8006b98:	4288      	cmp	r0, r1
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	eb01 0402 	add.w	r4, r1, r2
 8006ba0:	d902      	bls.n	8006ba8 <memmove+0x10>
 8006ba2:	4284      	cmp	r4, r0
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	d807      	bhi.n	8006bb8 <memmove+0x20>
 8006ba8:	1e43      	subs	r3, r0, #1
 8006baa:	42a1      	cmp	r1, r4
 8006bac:	d008      	beq.n	8006bc0 <memmove+0x28>
 8006bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bb6:	e7f8      	b.n	8006baa <memmove+0x12>
 8006bb8:	4402      	add	r2, r0
 8006bba:	4601      	mov	r1, r0
 8006bbc:	428a      	cmp	r2, r1
 8006bbe:	d100      	bne.n	8006bc2 <memmove+0x2a>
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bca:	e7f7      	b.n	8006bbc <memmove+0x24>

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
